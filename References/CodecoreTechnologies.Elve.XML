<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodecoreTechnologies.ElveXmlDoc</name>
    </assembly>
    <members>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.SpeechRecogCommandsDeviceSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.SpeechRecogCommandsDeviceSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.SpeechRecogCommandsDeviceSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.SerialPortDeviceSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.SerialPortDeviceSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.SerialPortDeviceSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.ArrayItemsDriverSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.ArrayItemsDriverSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.ArrayItemsDriverSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.InsteonDevicesDriverSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.InsteonDevicesDriverSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.InsteonDevicesDriverSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectParameterBaseAttribute.Mask">
            <summary>
            For format see: http://msdn.microsoft.com/en-us/library/system.windows.forms.maskedtextbox.mask.aspx
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectNamedParameterBaseAttribute.DisplayTextArrayPropertyName">
            <summary>
            The name of the object property to retrieve the list of value display texts from.
            <example>For example the SetLightLevel method's LightID parameter would have it's DisplayTextArrayPropertyName set to LightNames.</example>
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectClassAttribute">
            <summary>
            This attribute must be set on any field or property on an Script Object that can be accessed from a script.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectConstructorAttribute">
            <summary>
            This attribute must be set on any method on a Script Object that can be accessed from a script.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectConstructorParameterAttribute">
            <summary>
            This attribute describes the method parameters for a Script Object method that can be accessed from a script.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute">
            <summary>
            This attribute must be set on any field or property on an Script Object that can be accessed from a script.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance. This property will not be available in the Action List editor but can be used in scripts.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance with optional Action List editor support.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="scriptBuilderGetText">The text (with macros) to display in the Action List editor when Getting the property value. Set to null to prevent this property from being exposed in the Action List editor.</param>
            <param name="scriptBuilderSetText">The text (with macros) to display in the Action List editor when Setting the property value. Set to null to prevent this property from being exposed in the Action List editor, for example if there is no set accessor.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.String,System.String,System.Type,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance with optional Action List editor support and support for associating this ScriptArray property with another ScriptArray property that contains the names assocated with each element in this Script Array. Use this only if this property returns a ScriptArray (or object that inherits from ScriptArray) that contains all the same datatype and there is another property containing names to associate it with.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="scriptBuilderGetText">The text (with macros) to display in the Action List editor when Getting the property value. Set to null to prevent this property from being exposed in the Action List editor.</param>
            <param name="scriptBuilderSetText">The text (with macros) to display in the Action List editor when Setting the property value. Set to null to prevent this property from being exposed in the Action List editor, for example if there is no set accessor.</param>
            <param name="arrayElementType">The datatype for this ScriptArray property's elements. So for example if the script array holds all ScriptNumber's then you would specify: typeof(ScriptNumber).</param>
            <param name="arrayMinIndex">The lowest index in the array (usually 0 or 1).</param>
            <param name="arrayMaxIndex">The highest index in the array.</param>
            <param name="displayTextArrayPropertyName">The name of the property within this class that returns a ScriptArray (or a class that inherits from ScriptArray) that contains the names accociated with each value in this ScriptArray.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance with an entry mask that can be used to ensure the value entered by a user conforms to a valid format. The property must be of type ScriptString. This property will not be available in the Action List editor but can be used in scripts.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="mask">The entry mask used to ensure the value entered by a user conforms to a valid format. Mask formats can be read about here: http://msdn.microsoft.com/en-us/library/system.windows.forms.maskedtextbox.mask.aspx</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance with an entry mask that can be used to ensure the value entered by a user conforms to a valid format and optional Action List editor support.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="mask">The entry mask used to ensure the value entered by a user conforms to a valid format. Mask formats can be read about here: http://msdn.microsoft.com/en-us/library/system.windows.forms.maskedtextbox.mask.aspx</param>
            <param name="scriptBuilderGetText">The text (with macros) to display in the Action List editor when Getting the property value. Set to null to prevent this property from being exposed in the Action List editor.</param>
            <param name="scriptBuilderSetText">The text (with macros) to display in the Action List editor when Setting the property value. Set to null to prevent this property from being exposed in the Action List editor, for example if there is no set accessor.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.Double,System.Double)">
            <summary>
            Initializes a new ScriptObjectProperty instance with a value range that is used to ensure the value entered by the user is within the allowed range. The property must be of type ScriptNumber. This property will not be available in the Action List editor but can be used in scripts.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="minimumNumericValue">The minimum numeric value for the property when the value is entered by the user in some interfaces. This is not enforced via the scripting language.</param>
            <param name="maximumNumericValue">The maximum numeric value for the property when the value is entered by the user in some interfaces. This is not enforced via the scripting language.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.Double,System.Double,System.String,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance with a value range that is used to ensure the value entered by the user is within the allowed range and optional Action List editor support. The property must be of type ScriptNumber.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="minimumNumericValue">The minimum numeric value for the property when the value is entered by the user in some interfaces. This is not enforced via the scripting language.</param>
            <param name="maximumNumericValue">The maximum numeric value for the property when the value is entered by the user in some interfaces. This is not enforced via the scripting language.</param>
            <param name="scriptBuilderGetText">The text (with macros) to display in the Action List editor when Getting the property value. Set to null to prevent this property from being exposed in the Action List editor.</param>
            <param name="scriptBuilderSetText">The text (with macros) to display in the Action List editor when Setting the property value. Set to null to prevent this property from being exposed in the Action List editor, for example if there is no set accessor.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.Double,System.Double,System.String,System.String,System.Type,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance with a value range that is used to ensure the value entered by the user is within the allowed range and optional Action List editor support and support for associating this ScriptArray property with another ScriptArray property that contains the names assocated with each element in this Script Array. Use this only if this property returns a ScriptArray (or object that inherits from ScriptArray) that contains all ScriptNumber values and there is another property containing names to associate it with.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="minimumNumericValue">The minimum numeric value for the property when the value is entered by the user in some interfaces. This is not enforced via the scripting language.</param>
            <param name="maximumNumericValue">The maximum numeric value for the property when the value is entered by the user in some interfaces. This is not enforced via the scripting language.</param>
            <param name="scriptBuilderGetText">The text (with macros) to display in the Action List editor when Getting the property value. Set to null to prevent this property from being exposed in the Action List editor.</param>
            <param name="scriptBuilderSetText">The text (with macros) to display in the Action List editor when Setting the property value. Set to null to prevent this property from being exposed in the Action List editor, for example if there is no set accessor.</param>
            <param name="arrayElementType">The datatype for this ScriptArray property's elements. So for example if the script array holds all ScriptNumber's then you would specify: typeof(ScriptNumber).</param>
            <param name="arrayMinIndex">The lowest index in the array (usually 0 or 1).</param>
            <param name="arrayMaxIndex">The highest index in the array.</param>
            <param name="displayTextArrayPropertyName">The name of the property within this class that returns a ScriptArray (or a class that inherits from ScriptArray) that contains the names accociated with each value in this ScriptArray.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.String[])">
            <summary>
            Initializes a new ScriptObjectProperty instance with a list of allowed string values that the user sets the property to a valid value. The property must be of type ScriptString. This property will not be available in the Action List editor but can be used in scripts.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="valueList">A list of allowed string values that the user can choose from in some interface. This is not enforced via the scripting language.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.String[],System.String,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance with a list of allowed string values that the user sets the property to a valid value and optional Action List editor support.  The property must be of type ScriptString.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="valueList">A list of allowed string values that the user can choose from in some interface. This is not enforced via the scripting language.</param>
            <param name="scriptBuilderGetText">The text (with macros) to display in the Action List editor when Getting the property value. Set to null to prevent this property from being exposed in the Action List editor.</param>
            <param name="scriptBuilderSetText">The text (with macros) to display in the Action List editor when Setting the property value. Set to null to prevent this property from being exposed in the Action List editor, for example if there is no set accessor.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.Double[],System.String[])">
            <summary>
            Initializes a new ScriptObjectProperty instance with a list of number and string values used to ensure the value entered by the user is a valid value. The property must be of type ScriptNumber. This property will not be available in the Action List editor but can be used in scripts.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="numberListValues">A list of numeric values which the property can be set to.  This is not enforced via the scripting language.</param>
            <param name="numberListNames">A list of display names associated with the numeric values list. This is used when diplaying the value in some interfaces.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.Double[],System.String[],System.String,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance with a list of number and string values used to ensure the value entered by the user is a valid value and optional Action List editor support. The property must be of type ScriptNumber.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="numberListValues">A list of numeric values which the property can be set to.  This is not enforced via the scripting language.</param>
            <param name="numberListNames">A list of display names associated with the numeric values list. This is used when diplaying the value in some interfaces.</param>
            <param name="scriptBuilderGetText">The text (with macros) to display in the Action List editor when Getting the property value. Set to null to prevent this property from being exposed in the Action List editor.</param>
            <param name="scriptBuilderSetText">The text (with macros) to display in the Action List editor when Setting the property value. Set to null to prevent this property from being exposed in the Action List editor, for example if there is no set accessor.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectPropertyAttribute.#ctor(System.String,System.String,System.Double[],System.String[],System.String,System.String,System.Type,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new ScriptObjectProperty instance with a list of number and string values used to ensure the value entered by the user is a valid value and optional Action List editor support and support for associating this ScriptArray property with another ScriptArray property that contains the names assocated with each element in this Script Array. Use this only if this property returns a ScriptArray (or object that inherits from ScriptArray) that contains all ScriptNumber values and there is another property containing names to associate it with.
            </summary>
            <param name="propertyName">The display name for the property.</param>
            <param name="description">The description of the property.</param>
            <param name="numberListValues">A list of numeric values which the property can be set to.  This is not enforced via the scripting language.</param>
            <param name="numberListNames">A list of display names associated with the numeric values list. This is used when diplaying the value in some interfaces.</param>
            <param name="scriptBuilderGetText">The text (with macros) to display in the Action List editor when Getting the property value. Set to null to prevent this property from being exposed in the Action List editor.</param>
            <param name="scriptBuilderSetText">The text (with macros) to display in the Action List editor when Setting the property value. Set to null to prevent this property from being exposed in the Action List editor, for example if there is no set accessor.</param>
            <param name="arrayElementType">The datatype for this ScriptArray property's elements. So for example if the script array holds all ScriptNumber's then you would specify: typeof(ScriptNumber).</param>
            <param name="arrayMinIndex">The lowest index in the array (usually 0 or 1).</param>
            <param name="arrayMaxIndex">The highest index in the array.</param>
            <param name="displayTextArrayPropertyName">The name of the property within this class that returns a ScriptArray (or a class that inherits from ScriptArray) that contains the names accociated with each value in this ScriptArray.</param>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectMethodAttribute">
            <summary>
            This attribute must be set on any method on a Script Object that can be accessed from a script.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new ScriptObjectMethod instance. This method will not be available in the Action List editor but can be used in scripts.
            </summary>
            <param name="displayName">The displayname of the method.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectMethodAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new ScriptObjectMethod instance. This method will not be available in the Action List editor but can be used in scripts.
            </summary>
            <param name="displayName">The display name of the method.</param>
            <param name="description">The description of the method.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectMethodAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new ScriptObjectMethod instance with Action List editor support.
            </summary>
            <param name="displayName">The display name of the method.</param>
            <param name="description">The description of the method.</param>
            <param name="scriptBuilderText">The text (with macros) to display in the Action List editor when invoking this method.</param>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObjectMethodParameterAttribute">
            <summary>
            This attribute describes the method parameters for a Script Object method that can be accessed from a script.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptMarshalByRefObject">
            <summary>
            All expression evalator objects must inherit from this class.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptMarshalByRefObject.Serialize">
            <summary>
            Serializes the object to a byte array.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObject.Clone">
            <summary>
             Clone the object by serializing it then deserializing. For better performance each IScriptObject type should override this and provide a quicker routine.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
            <exception cref="T:System.NotSupportedException">The type does not support cloning via serialization/deserialization.</exception>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObject.CloneLocally(CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject)">
            <summary>
            Clones a IScriptObject and returns a local copy (as opposed to a remote transparent proxy).
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObject.Deserialize(System.Byte[])">
            <summary>
            Deserializes the object from a byte array.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObject.isTypeImplementationOf(System.Type,System.Type)">
            <summary>
            Determines whether the specified System.Type implements the specified interface System.Type.
            This differs from Type.IsAssignableFrom() in that it returns false if theType and interfaceType are the same type.
            </summary>
            <param name="theType">The type to compare.</param>
            <param name="interfaceType">The interface type which theType must implement to return true.</param>
            <returns>true is theType implements interfaceType.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObject.ScriptObjectConstructors">
            <summary>
            Returns information on all exposed Script Member properties.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObject.ScriptObjectMethods">
            <summary>
            Returns information on all exposed Script Member properties.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptObject.ScriptObjectProperties">
            <summary>
            Returns information on all exposed Script Member properties.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptString.toFriendlyName(System.String,System.Boolean)">
             <summary>
             returns a friendly name of a string
             eg. "SomeUtilsText" becomes "Some Utils Text"
             eg2. "BillInvoiceID" becomes "Bill Invoice" if trimIDText = true
             
             "UseSSL" becomes "Use SSL"
             "UseSslAndSmtp" becomes "Use Ssl And Smtp"
             "UseSslAndSMTP" becomes "Use Ssl And SMTP"
             "UseSSLAndSmtp" becomes "Use SSL And Smtp"
            
             </summary>
             <param name="input">the input string</param>
             <param name="trimIDText">if "ID" text should be cut off the end of the string</param>
             <returns>a friendly name string</returns>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptArray">
            <summary>
            Exposes members for array-like Script Object collections.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor">
            <summary>
            Initializes a new empty readable and writeable instance of the ScriptArray class. Use the SetItemInternal method to populate.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new empty instance of the ScriptArray class with the specified read/write accessibility. Use the SetItemInternal method to populate.
            </summary>
            <param name="isReadable">Indicates if the ScriptArray elements can be read.</param>
            <param name="isWriteable">Indicates if the ScriptArray elements can be written to.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class populated with the given ScriptObjects starting at index 0.
            </summary>
            <param name="items"></param>
            <param name="isReadable">Indicates if the ScriptArray elements can be read.</param>
            <param name="isWriteable">Indicates if the ScriptArray elements can be written to.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Double collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Double will be converted to a ScriptNumber.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Double collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Double will be converted to a ScriptNumber.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
            <param name="isWritable">Indicates if the array object is writable.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Int32 collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Int32 will be converted to a ScriptNumber.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Int32 collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Int32 will be converted to a ScriptNumber.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
            <param name="isWritable">Indicates if the array object is writable.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.Int16},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Int16 collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Int16 will be converted to a ScriptNumber.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.Int16},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Int16 collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Int16 will be converted to a ScriptNumber.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
            <param name="isWritable">Indicates if the array object is writable.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptString elements copied from the specified System.String collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.String will be converted to a ScriptString.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptString elements copied from the specified System.String collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.String will be converted to a ScriptString.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
            <param name="isWritable">Indicates if the array object is writable.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.Boolean},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptBoolean elements copied from the specified System.Boolean collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Boolean will be converted to a ScriptBoolean.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.Boolean},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptBoolean elements copied from the specified System.Boolean collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Boolean will be converted to a ScriptBoolean.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
            <param name="isWritable">Indicates if the array object is writable.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.DateTime},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptDateTime elements copied from the specified System.DateTime collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.DateTime will be converted to a ScriptBoolean.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.DateTime},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptDateTime elements copied from the specified System.DateTime collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.DateTime will be converted to a ScriptBoolean.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
            <param name="isWritable">Indicates if the array object is writable.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.TimeSpan},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptTimeSpan elements copied from the specified System.TimeSpan collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.TimeSpan will be converted to a ScriptBoolean.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{System.TimeSpan},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptTimeSpan elements copied from the specified System.TimeSpan collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.TimeSpan will be converted to a ScriptBoolean.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
            <param name="isWritable">Indicates if the array object is writable.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains elements copied from the specified collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.#ctor(System.Collections.Generic.IEnumerable{CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject},System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains elements copied from the specified collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
            <param name="isWritable">Indicates if the array object is writable.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.SetItemInternal(System.Int32,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject)">
            <summary>
            Sets a value to the element at the specified position in the ScriptArray. The ScriptArray will automatically expand (and be filled with null elements) if the specified index is out of bounds. This method will not invoke the set callback which may have been applied to the ScriptArray.
            </summary>
            <param name="index">The position of the ScriptArray element to set.</param>
            <param name="o">The new value for the specified element.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.Insert(System.Int32,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject)">
            <summary>
             Inserts an item to the array at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The item to insert into the array.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the array.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.CanRead">
            <summary>
            Gets a value indicating whether the ScriptArray elements can be read.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.CanWrite">
            <summary>
            Gets a value indicating whether the ScriptArray elements can be written to.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.Item(System.Int32)">
            <summary>
            Gets the value at the specified position in the ScriptArray.
            </summary>
            <param name="index">The position of the ScriptArray element to get.</param>
            <returns>The value at the specified position in the ScriptArray.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.Length">
            <summary>
            Gets the total length of the array from index 0 to the last element.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.BoundsLength">
            <summary>
            Gets the number of items from the lowest index to the highest index in the array. Empty indexes are included.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.LowestIndex">
            <summary>
            Gets the lowest index that has been assigned a value.  Returns -1 if no array elements have been set.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.HighestIndex">
            <summary>
            Gets the highest index that has been assigned a value.  Returns -1 if no array elements have been set.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.PrimitiveLength">
            <summary>
            Returns the total number of elements in the array from 0 to the last element.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.PrimitiveBoundsLength">
            <summary>
            Returns the number of elements from the lowest set index to the highest set index.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.PrimitiveLowestIndex">
            <summary>
            Gets the lowest index that has been assigned a value.  Returns -1 if no array elements have been set.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByValue.PrimitiveHighestIndex">
            <summary>
            Gets the highest index that has been assigned a value.  Returns -1 if no array elements have been set.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor">
            <summary>
            Initializes a new empty readable and writeable instance of the ScriptArray class. Use the SetItemInternal method to populate.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new empty instance of the ScriptArray class with the specified read/write accessibility. Use the SetItemInternal method to populate.
            </summary>
            <param name="isReadable">Indicates if the ScriptArray elements can be read.</param>
            <param name="isWriteable">Indicates if the ScriptArray elements can be written to.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the ScriptArray class populated with the given ScriptObjects starting at index 0.
            </summary>
            <param name="items"></param>
            <param name="isReadable">Indicates if the ScriptArray elements can be read.</param>
            <param name="isWriteable">Indicates if the ScriptArray elements can be written to.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.Double},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Double collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Double will be converted to a ScriptNumber.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.Double},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetDoubleCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Double collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Double will be converted to a ScriptNumber.</param>
            <param name="setArrayElementCallback">A ScriptArraySetDoubleCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.Double},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetScriptNumberCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Double collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Double will be converted to a ScriptNumber.</param>
            <param name="setArrayElementCallback">A ScriptArraySetScriptNumberCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.Int32},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Int32 collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Int32 will be converted to a ScriptNumber.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.Int32},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetInt32Callback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Int32 collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Int32 will be converted to a ScriptNumber.</param>
            <param name="setArrayElementCallback">A ScriptArraySetInt32Callback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.Int32},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetScriptNumberCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptNumber elements copied from the specified System.Int32 collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Int32 will be converted to a ScriptNumber.</param>
            <param name="setArrayElementCallback">A ScriptArraySetScriptNumberCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptString elements copied from the specified System.String collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.String will be converted to a ScriptString.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.String},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetStringCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptString elements copied from the specified System.String collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.String will be converted to a ScriptString.</param>
            <param name="setArrayElementCallback">A ScriptArraySetStringCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.String},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetScriptStringCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptString elements copied from the specified System.String collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.String will be converted to a ScriptString.</param>
            <param name="setArrayElementCallback">A ScriptArraySetScriptStringCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.Boolean},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptBoolean elements copied from the specified System.Boolean collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Boolean will be converted to a ScriptBoolean.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.Boolean},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetBooleanCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptBoolean elements copied from the specified System.Boolean collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Boolean will be converted to a ScriptBoolean.</param>
            <param name="setArrayElementCallback">A ScriptArraySetBooleanCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.Boolean},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetScriptBooleanCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptBoolean elements copied from the specified System.Boolean collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Boolean will be converted to a ScriptBoolean.</param>
            <param name="setArrayElementCallback">A ScriptArraySetScriptBooleanCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.DateTime},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptDateTime elements copied from the specified System.DateTime collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.DateTime will be converted to a ScriptBoolean.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.DateTime},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetDateTimeCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptDateTime elements copied from the specified System.DateTime collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Boolean will be converted to a ScriptDateTime.</param>
            <param name="setArrayElementCallback">A ScriptArraySetDateTimeCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.DateTime},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetScriptDateTimeCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptDateTime elements copied from the specified System.DateTime collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Boolean will be converted to a ScriptDateTime.</param>
            <param name="setArrayElementCallback">A ScriptArraySetScriptDateTimeCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.TimeSpan},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptTimeSpan elements copied from the specified System.TimeSpan collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.TimeSpan will be converted to a ScriptBoolean.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.TimeSpan},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetTimeSpanCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptTimeSpan elements copied from the specified System.TimeSpan collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Boolean will be converted to a ScriptTimeSpan.</param>
            <param name="setArrayElementCallback">A ScriptArraySetTimeSpanCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{System.TimeSpan},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetScriptTimeSpanCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains ScriptTimeSpan elements copied from the specified System.TimeSpan collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray. Each System.Boolean will be converted to a ScriptTimeSpan.</param>
            <param name="setArrayElementCallback">A ScriptArraySetScriptTimeSpanCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject},System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains elements copied from the specified collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.#ctor(System.Collections.Generic.IEnumerable{CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject},CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArraySetScriptObjectCallback,System.Int32)">
            <summary>
            Initializes a new instance of the ScriptArray class that contains elements copied from the specified collection.
            </summary>
            <param name="indexValues">The collection whose elements are copied to the new ScriptArray.</param>
            <param name="setArrayElementCallback">A ScriptArraySetScriptObjectCallback delegate that contains a method to be called when an array element is set. Calling the SetItemInternal method will not invoke the callback.</param>
            <param name="baseIndex">The index of the first element in the resulting ScriptArray. This is usually 0 or 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.SetItemInternal(System.Int32,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject)">
            <summary>
            Sets a value to the element at the specified position in the ScriptArray. The ScriptArray will automatically expand (and be filled with null elements) if the specified index is out of bounds. This method will not invoke the set callback which may have been applied to the ScriptArray.
            </summary>
            <param name="index">The position of the ScriptArray element to set.</param>
            <param name="o">The new value for the specified element.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.Insert(System.Int32,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject)">
            <summary>
            Inserts an item to the array at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The item to insert into the array.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the array.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.CanRead">
            <summary>
            Gets a value indicating whether the ScriptArray elements can be read.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.CanWrite">
            <summary>
            Gets a value indicating whether the ScriptArray elements can be written to.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.Item(System.Int32)">
            <summary>
            Gets the value at the specified position in the ScriptArray.
            </summary>
            <param name="index">The position of the ScriptArray element to get.</param>
            <returns>The value at the specified position in the ScriptArray.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.Length">
            <summary>
            Gets the total length of the array from index 0 to the last element.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.BoundsLength">
            <summary>
            Gets the number of items from the lowest index to the highest index in the array. Empty indexes are included.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.LowestIndex">
            <summary>
            Gets the lowest index that has been assigned a value.  Returns -1 if no array elements have been set.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.HighestIndex">
            <summary>
            Gets the highest index that has been assigned a value.  Returns -1 if no array elements have been set.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.PrimitiveLength">
            <summary>
            Returns the total number of elements in the array from 0 to the last element.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.PrimitiveBoundsLength">
            <summary>
            Returns the number of elements from the lowest set index to the highest set index.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.PrimitiveLowestIndex">
            <summary>
            Gets the lowest index that has been assigned a value.  Returns -1 if no array elements have been set.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptArrayMarshalByReference.PrimitiveHighestIndex">
            <summary>
            Gets the highest index that has been assigned a value.  Returns -1 if no array elements have been set.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.IRDeviceCodeEventParameterEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.IRDeviceCodeEventParameterEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.IRDeviceCodeEventParameterEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Communication.ConnectionAttemptFailedEventArgs">
            <summary>
            Provides data for the ConnectionAttemptFailed event.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Communication.ReceivedDelimitedStringEventArgs">
            <summary>
            Provides data for the ReceivedDelimitedString event.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Communication.ReceivedBytesEventArgs">
            <summary>
            Provides data for the ReceivedBytes event.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Communication.ReceivedBytesEventArgs.ReceiveBuffer">
            <summary>
            The incoming data buffer.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Communication.ReceivedBytesEventArgs.ByteCount">
            <summary>
            The number of bytes of data in ReceiveBuffer starting at index 0.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Communication.ReceivedStringEventArgs">
            <summary>
            Provides data for the ReceivedString event.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Communication.ReceivedStringEventArgs.ReceiveBuffer">
            <summary>
            The incoming data buffer decoded using the CurrentEncoding property.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.MaximumReadBufferSize">
            <summary>
            The ReadBufferOverflow event will occur when the buffer size limit has been exceeded. The overflowed data will be lost.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.StartConnectionMonitor">
            <summary>
            Attempts to open a connection if there is currently no connection open, and starts the connection monitor.  The ConnectionEstablished event occurs when the connection is established, and the ConnectionAttemptFailed event occurs when a connection attempt fails.
            No Exceptions are thrown.
            This method is run asynchronously and returns immediately.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.StartConnectionMonitorSync">
            <summary>
            Attempts to open a connection if there is currently no connection open, and starts the connection monitor.  The ConnectionEstablished event occurs when the connection is established, and the ConnectionAttemptFailed event occurs when a connection attempt fails.
            No Exceptions are thrown.
            The first connection attempt blocks the thread so the Connected property should be checked after invoking StartConnectionMonitor() to determine if the inital connection attempt failed.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.StopConnectionMonitor">
            <summary>
            Stops the connection monitoring.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ProcessReceivedData(System.Byte[],System.Int32)">
            <summary>
            Add the specified data to the internal buffer and parses the buffer for delimited data.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.open">
            <summary>
            Opens the connection.  This should throw an exception if it failed to open.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.sendData(System.Byte[])">
            <summary>
            This is the method that does the actual sending (as opposed to queueing).
            </summary>
            <param name="raw"></param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Open">
            <summary>
            Opens a new connection. An exception is thrown if it fails. ConnectionEstablished or ConnectionAttemptFailed will also be raised.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Send(System.String)">
            <summary>
            Enqueue a string to be sent as soon as all previously queued items have been sent.
            </summary>
            <param name="s">The string to enqueue to be sent.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Send(System.String,System.Int32)">
            <summary>
            Enqueue a string to be sent the specified milliseconds after the previously queued item has been sent.
            </summary>
            <param name="s">The string to enqueue to be sent.</param>
            <param name="delayMilliseconds">The number of milliseconds to wait to send the string after the prior send has occurred.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Send(System.Byte[])">
            <summary>
            Enqueue a byte array to be sent as soon as all previously queued items have been sent.
            </summary>
            <param name="data">The byte array to enqueue to send.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Send(System.Byte[],System.Int32)">
            <summary>
            Enqueue a byte array to be sent the specified milliseconds after the previously queued item has been sent.
            </summary>
            <param name="data">The byte array to enqueue to send</param>
            <param name="delayMilliseconds">The number of milliseconds to wait to send the byte array after the prior send has occurred.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.SimulateReceivedData(System.String)">
            <summary>
            Simulate data being received from the connection. The data will be processed as if it were actually received as incoming data from the tcp connection. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.SimulateReceivedData(System.Byte[])">
            <summary>
            Simulate data being received from the connection. The data will be processed as if it were actually received as incoming data from the tcp connection. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.EnqueueDataToSend(System.Byte[])">
            <summary>
            Add the data to queue for sending.
            </summary>
            <param name="data">The data to send.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.EnqueueDataToSend(System.Byte[],System.Int32)">
            <summary>
            Add the data to queue for sending.
            </summary>
            <param name="data">The data to send.</param>
            <param name="delayMilliseconds">The number of milliseconds to ensure have passed between the previously sent data packet and this data packet.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Flush(System.Int32)">
            <summary>
            Waits for the send queue to send all pending packets.
            </summary>
            <param name="timeoutMilliseconds">The maximum number of milliseconds to wait for the send queue to finish before throwing a TimeoutException. -1 = infinity.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Dispose">
            <summary>
            Waits for the send queue to send all pending data and then releases all resources used by the object.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Dispose(System.Int32)">
            <summary>
            Waits a maximum of the specified number of milliseconds for the send queue to send all pending data and releases all resources used by the object.
            </summary>
            <param name="timeoutMilliseconds">The maximum number of milliseconds to wait for the send queue to finish before disposing. -1 = infinity.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ResetByteCountTotals">
            <summary>
            Resets the total sent and received byte counts to zero.
            </summary>
        </member>
        <member name="E:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ReceivedDelimitedString">
            <summary>
            Occurs when a delimited string is received. A delimited string is detected by using the value in the Delimiter property. If the Delimiter property is null this event will not occur.  The EventArgs contain the delimited string. The IncludeDelimiterInRawResponse property indicates if the delimited string will include the delimiter.
            </summary>
        </member>
        <member name="E:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ReceivedBytes">
            <summary>
            Occurs when data is received. The received bytes will be in the EventArgs.  If the ReadBufferEnabled property is true, you may also process the ReadBuffer property.
            </summary>
        </member>
        <member name="E:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ReceivedString">
            <summary>
            Occurs when string data is received. The received string will be in the EventArgs.
            </summary>
        </member>
        <member name="E:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ReadBufferOverflow">
            <summary>
            Occrus when the ReadBufferEnabled property is true and the buffer size limit has been exceeded. The overflowed data will be lost.
            </summary>
        </member>
        <member name="E:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ConnectionMonitorTest">
            <summary>
            Occurs after no data has been received in the specified amount of time and the object's connection monitor would like to send a heartbeat to ensure the connection is still established.
            This is usually used as an alternative to ConnectionMonitorTestRequest or ConnectionMonitorTestRequestBytes when a more complicated heartbeat/request is necessary.
            </summary>
        </member>
        <member name="E:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ConnectionEstablished">
            <summary>
            Occurs when the connection is reestablished.
            </summary>
        </member>
        <member name="E:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ConnectionAttemptFailed">
            <summary>
            Occurs when a connection was attempted but failed.
            </summary>
        </member>
        <member name="E:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ConnectionLost">
            <summary>
            Occurs when the connection is lost.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ReadBufferEnabled">
            <summary>
            Gets a value indicating if the ReadBuffer is enabled.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ConnectionMonitorEnabled">
            <summary>
            Gets a value indicating if connection monitoring enabled.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Logger">
            <summary>
            The ILogger object to use when logging. If this is not specified then the system logger will be used.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ConnectionMonitorTimeout">
            <summary>
            The number of milliseconds of no data received before the ConnectionMonitorTestRequest is sent to request a response.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ConnectionMonitorTestRequest">
            <summary>
            The full data string (including any end of line characters) that is sent to request a response if no data has been received in the number of milliseconds specified in ConnectionMonitorTimeout.
            This will set ConnectionMonitorTestBytes using the CurrentEncoding.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.ConnectionMonitorTestBytes">
            <summary>
            The full byte array data (including any end of line characters) that is sent to request a response if no data has been received in the number of milliseconds specified in ConnectionMonitorTimeout.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Delimiter">
            <summary>
            Gets or sets the end of response delimiter. Set to null to not parse using a delimiter.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.CurrentEncoding">
            <summary>
            Gets or sets the current character encoding that the serial port object using. Set to null to not decode to a string.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.DefaultSendDelayInterval">
            <summary>
            The default number of milliseconds to ensure have passed between the sending data packets. The Send methods can also optionally accept a delay value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.Connected">
            <summary>
            Indicates if the pc is successfully communicating with the the device.
            
            For serial connections when not using connection monitoring, this will always be true as long as the serial port was successfully opened.
            For serial connections when using connection monitoring, this will only be true if the serial port was successfully opened and the device consistantly sends data to the pc within a specified time limit.
            
            For tcp connections when not using connection monitoring, this will only be true as long a tcp connection was established and sending data does not cause an error.
            For tcp connections when using connection monitoring, this will only be true if a tcp connection was established, sending data does not cause an error, and the device consistantly sends data to the pc within a specified time limit.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.TotalReceivedByteCount">
            <summary>
            The total number of bytes that have been received.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BaseCommunication.TotalSentByteCount">
            <summary>
            The total number of bytes that have been sent.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader">
            <summary>
            Provides access to buffered incoming data.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.Clear">
            <summary>
             Clear the buffer.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.ReadBytes(System.Int32)">
            <summary>
            Read and remove the specified number of bytes in the buffer.
            </summary>
            <param name="count">The number of bytes to read/remove.</param>
            <returns>A byte array.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.ReadString(System.Int32)">
            <summary>
            Read and remove the specified number of characters in the buffer.
            </summary>
            <param name="charCount">The number of characters to read/remove.</param>
            <returns>A string.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.ReadChars(System.Char[],System.Int32,System.Int32)">
            <summary>
            Read and remove the specified number of characters in the buffer.
            </summary>
            <param name="count">The number of characters to read/remove.</param>
            <returns>A character array.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.IndexOf(System.Byte[])">
            <summary>
            Reports the index of the position of the first occurrence of the specified byte sequence in the buffer.
            </summary>
            <param name="findme">The byte sequence to search for.</param>
            <returns>The zero-based index position of value if that byte sequence is found, or -1 if it is not.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.IndexOf(System.Byte[],System.Int32)">
            <summary>
            Reports the index of the first occurrence of the specified byte sequence in the buffer. The search starts at a specified byte position.
            </summary>
            <param name="findme">The byte sequence to search for.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of value if that byte sequence is found, or -1 if it is not.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.IndexOf(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reports the index of the first occurrence of the specified byte sequence in the buffer. The search starts at a specified byte position and examines a specified number of byte positions.
            </summary>
            <param name="findme">The byte sequence to search for.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of byte positions to examine. </param>
            <returns>The zero-based index position of value if that byte sequence is found, or -1 if it is not.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.IndexOf(System.String)">
            <summary>
            Reports the index of the first occurrence of the specified String in the buffer.
            </summary>
            <param name="findme">The String to search for.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.IndexOf(System.String,System.Int32)">
            <summary>
            Reports the index of the first occurrence of the specified String in the buffer. The search starts at a specified byte position.
            </summary>
            <param name="findme">The String to search for.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.IndexOf(System.String,System.Int32,System.Int32)">
            <summary>
            Reports the index of the first occurrence of the specified String in the buffer. The search starts at a specified byte position and examines a specified number of byte positions.
            </summary>
            <param name="findme">The String to search for.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="count">The number of byte positions to examine. </param>
            <returns>The zero-based index position of value if that string is found, or -1 if it is not.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.Item(System.Int32)">
            <summary>
            Gets the byte at the specified index in the buffer. The byte will not be removed from the buffer.
            </summary>
            <param name="index">The index of the byte to retrieve.</param>
            <returns>A byte.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.BufferReader.Length">
            <summary>
            Gets the number of bytes in the buffer.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.Calculate(System.DateTime,System.Double,System.Double,System.TimeZoneInfo,CodecoreTechnologies.Elve.DriverFramework.Utilities.SunZenith)">
            <summary>
            
            </summary>
            <param name="dt"></param>
            <param name="latitude">In decimal degrees, positive for North latitudes.</param>
            <param name="longitude">In decimal degrees, negative for West longitudes.</param>
            <param name="timeZone">The timezone (used to calulate UTC offset and if observing DST for given date).</param>
            <param name="desiredZenith">Official, Civil, Nautical or Astronimical horizon limit.</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.Calculate(System.DateTime,System.Double,System.Double,System.Double,System.TimeSpan,CodecoreTechnologies.Elve.DriverFramework.Utilities.SunZenith)" -->
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.Test">
            <summary>
            The entry point for the program.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.radToDeg(System.Double)">
            <summary>
            Converts radians to degrees
            </summary>
            <param name="angleRad">radians</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.degToRad(System.Double)">
            <summary>
            Converts degrees to radians
            </summary>
            <param name="angleDeg">degrees</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcDateFromJD(System.Double)">
            <summary>
            Calculates the Gregorian DateTime from a Julian Day.
            </summary>
            <param name="jd">Julian Day</param>
            <returns>DateTime in Gregorian calendar</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcJD(System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculates the Julian Day corresponding to the date.
            </summary>
            <param name="day">the day</param>
            <param name="month">the month</param>
            <param name="year">the year</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcTimeJulianCent(System.Double)">
            <summary>
            Convert Julian Day to centuries since J2000.0.
            </summary>
            <param name="jd">the Julian Day to convert</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcJDFromJulianCent(System.Double)">
            <summary>
            Convert centuries since J2000.0 to Julian Day.
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcGeomMeanLongSun(System.Double)">
            <summary>
            Calculate the Geometric Mean Longitude of the Sun
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcGeomAnomalySun(System.Double)">
            <summary>
            Calculate the Geometric Mean Anomaly of the Sun
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSunEqOfCenter(System.Double)">
            <summary>
            Calculate the equation of center for the sun
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSunTrueLong(System.Double)">
            <summary>
            Calculate the true longitude of the sun
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSunTrueAnomaly(System.Double)">
            <summary>
            Calculate the true anamoly of the sun
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSunRadVector(System.Double)">
            <summary>
            Calculate the distance to the sun in AU
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcEccentricityEarthOrbit(System.Double)">
            <summary>
            Calculate the eccentricity of earth's orbit
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSunApparentLong(System.Double)">
            <summary>
            Calculate the apparent longitude of the sun
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcMeanObliquityOfEcliptic(System.Double)">
            <summary>
            Calculate the mean obliquity of the ecliptic
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcObliquityCorrection(System.Double)">
            <summary>
            Calculate the corrected obliquity of the ecliptic
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSunRtAscension(System.Double)">
            <summary>
            Calculate the right ascension of the sun
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSunDeclination(System.Double)">
            <summary>
            Calculate the declination of the sun
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcEquationOfTime(System.Double)">
            <summary>
            Calculate the difference between true solar time and mean solar time
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcHourAngleSunrise(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the hour angle of the sun at sunrise for the latitude
            </summary>
            <param name="zenith">horizon limit</param>
            <param name="latitude">latitude of observer in degrees</param>
            <param name="solarDec">declination angle of sun in degrees</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcHourAngleSunset(System.Double,System.Double,System.Double)">
            <summary>
            Calculate the hour angle of the sun at sunset for the latitude
            </summary>
            <param name="zenith">horizon limit</param>
            <param name="latitude">latitude of observer in degrees</param>
            <param name="solarDec">declination angle of sun in degrees</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSunriseUTC(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the Universal Coordinated Time (UTC) of sunrise for the given day at
            the given location on earth
            </summary>
            <param name="zenith">horizon limit</param>
            <param name="JD">julian day</param>
            <param name="latitude">latitude of observer in degrees</param>
            <param name="longitude">longitude of observer in degrees</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSolNoonUTC(System.Double,System.Double)">
            <summary>
            Calculate the Universal Coordinated Time (UTC) of solar noon for the given day
            at the given location on earth
            </summary>
            <param name="t">number of Julian centuries since J2000.0</param>
            <param name="longitude">longitude of observer in degrees</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.calcSunsetUTC(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Calculate the Universal Coordinated Time (UTC) of sunset for the given day at
            the given location on earth
            </summary>
            <param name="zenith">horizon limit</param>
            <param name="JD">julian day</param>
            <param name="latitude">latitude of observer in degrees</param>
            <param name="longitude">longitude of observer in degrees</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.findRecentSunrise(System.Double,System.Double,System.Double,CodecoreTechnologies.Elve.DriverFramework.Utilities.SunZenith)">
            <summary>
            Calculate the julian day of the most recent sunrise
            </summary>
            <param name='JD'>Julian Day</param>
            <param name='latitude'>latitude of observer in degrees</param>
            <param name='longitude'>longitude of observer in degrees</param>
            <param name='zenithValue'>Official, Civil, Nautical or Astronimical horizon limit</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.findRecentSunset(System.Double,System.Double,System.Double,CodecoreTechnologies.Elve.DriverFramework.Utilities.SunZenith)">
            <summary>
            Calculate the julian day of the most recent sunset
            </summary>
            <param name='JD'>Julian Day</param>
            <param name='latitude'>latitude of observer in degrees</param>
            <param name='longitude'>longitude of observer in degrees</param>
            <param name='zenithValue'>Official, Civil, Nautical or Astronimical horizon limit</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.findNextSunrise(System.Double,System.Double,System.Double,CodecoreTechnologies.Elve.DriverFramework.Utilities.SunZenith)">
            <summary>
            Calculate the julian day of the next sunrise
            starting from the given day at the given location on earth
            </summary>
            <param name='JD'>Julian Day</param>
            <param name='latitude'>latitude of the observer in degrees</param>
            <param name='longitude'>longitude of the observer in degrees</param>
            <param name='zenithValue'>Official, Civil, Nautical or Astronimical horizon limit</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.findNextSunset(System.Double,System.Double,System.Double,CodecoreTechnologies.Elve.DriverFramework.Utilities.SunZenith)">
            <summary>
            Calculate the julian day of the next sunset
            starting from the given day at the given location on earth
            </summary>
            <param name='JD'>Julian Day</param>
            <param name='latitude'>latitude of observer in degrees</param>
            <param name='longitude'>longitude of observer in degrees</param>
            <param name='zenithValue'>Official, Civil, Nautical or Astronimical horizon limit</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.doCalc(System.Double,System.Double,System.Double,System.Double,CodecoreTechnologies.Elve.DriverFramework.Utilities.SunZenith)">
            <summary>
            The main calculation starting point and results display.
            </summary>
            <param name='JD'>Julian Day</param>
            <param name='t'>Julian centuries since J2000.0</param>
            <param name='eqtime'>Equation of Time</param>
            <param name='solarDec'>Solar Declination</param>
            <param name='zenithValue'>Sets the horizon limit</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.SunriseSunsetCalculator.doCalcNew(System.Double,System.Double,System.Double,System.Double,CodecoreTechnologies.Elve.DriverFramework.Utilities.SunZenith)">
            <summary>
            The main calculation starting point and results display.
            </summary>
            <param name='JD'>Julian Day</param>
            <param name='t'>Julian centuries since J2000.0</param>
            <param name='eqtime'>Equation of Time</param>
            <param name='solarDec'>Solar Declination</param>
            <param name='zenithValue'>Sets the horizon limit</param>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Driver">
            <summary>
            This is the base driver class.  All device drivers must inherit this class.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.StartDriver(System.Collections.Generic.Dictionary{System.String,System.Byte[]})">
            <summary>
            Starts the driver.  This typically sets any class variables, sets up communications ports, and hooks any event handlers such as SerialCommunication ReceivedBytes, etc. This method should be overridden in every device driver.
            </summary>
            <param name="configFileData">The supplementary configuration files that this driver uses.</param>
            <returns>A value indicating if the driver is ready for use when StartDriver() exist. If not, return false and then set the IsReady property to true when the driver is ready for use (which is usually after all properties are set by retriveing them from a serial or tcp connection).</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.StopDriver">
            <summary>
            Stops the driver by unhooking any event handlers and releasing any used resources. This method should be overridden in every device driver.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.ExecuteDriverRuleSafely(CodecoreTechnologies.Elve.DriverFramework.IRule)">
            <summary>
            Execute a an individual rule. It is highly recommended that you use the RaiseDeviceEvent method instead.
            </summary>
            <param name="rule">The rule to execute.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.ExecuteDriverRuleSafely(CodecoreTechnologies.Elve.DriverFramework.IRule,CodecoreTechnologies.Elve.DriverFramework.DriverEventArgDictionary)">
            <summary>
            Execute a an individual rule. It is highly recommended that you use the RaiseDeviceEvent method instead.
            </summary>
            <param name="rule">The rule to execute.</param>
            <param name="eventArgs">The parameters to pass to the rule for use in the script EventArgs object.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.DevicePropertyChangeNotification(System.String)">
             <summary>
             Notifies the system that the specified device property value may have changed and triggers the associated event if applicable.
             The system will automatically compare the value with the property's previous value so this method can be called even when the value did not change.
             Touch Screen Client applications are notified of changes so the display can be updated if needed.
             The property must be a member of this driver and must be decorated with the [SupportsPropertyBinding] attribute.
            
             Calling this with the name of a property of type IScriptArray will send notifications for each array element (enumerating the entire array).
             
             The property's value will automatically be retrieved using this overload.
             </summary>
             <remarks>The spelling of the name of the property that may have changed must match the property name exactly (it is case-insensitive). There are several method overrides to choose from. You may pass in just the property name for non-IScriptArray properties or you can also specify the new property value which is more efficient since the system does not need to use reflection to get the property value. For IScriptArray properties, the array index parameter must also be specified.</remarks>
             <param name="propertyName">The name of the property.  The property must be a member of this driver and must be decorated with the [SupportsPropertyBinding] attribute. If the property is of type IScriptArray, notifications will be sent for each array element.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.DevicePropertyChangeNotification(System.String,System.Object)">
            <summary>
            Notifies the system that the specified device property value may have changed and triggers the associated event if applicable.
            The system will automatically compare the value with the property's previous value so this method can be called even when the value did not change.
            Touch Screen Client applications are notified of changes so the display can be updated if needed.
            The property must be a member of this driver and must be decorated with the [SupportsPropertyBinding] attribute.
            </summary>
            <remarks>The spelling of the name of the property that may have changed must match the property name exactly (it is case-insensitive). There are several method overrides to choose from. You may pass in just the property name for non-IScriptArray properties or you can also specify the new property value which is more efficient since the system does not need to use reflection to get the property value. For IScriptArray properties, the array index parameter must also be specified.</remarks>
            <param name="propertyName">The name of the property.  The property must be a member of this driver and must be decorated with the [SupportsPropertyBinding] attribute.</param>
            <param name="newPropertyValue">The value of the property. Valid datatypes are String, numeric types, Boolean, DateTime, byte[], ScriptString, ScriptNumber, ScriptBoolean, ScriptDateTime, ScriptByteArray, ScriptImage.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.DevicePropertyChangeNotification(System.String,System.Int32,System.Object)">
            <summary>
            Notifies the system that the specified device property array element value may have changed and triggers the associated event if applicable.
            The system will automatically compare the value with the property's previous value so this method can be called even when the value did not change.
            Touch Screen Client applications are notified of changes so the display can be updated if needed.
            The property must be a member of this driver and must be decorated with the [SupportsPropertyBinding] attribute.
            </summary>
            <remarks>The spelling of the name of the property that may have changed must match the property name exactly (it is case-insensitive). There are several method overrides to choose from. You may pass in just the property name for non-IScriptArray properties or you can also specify the new property value which is more efficient since the system does not need to use reflection to get the property value. For IScriptArray properties, the array index parameter must also be specified.</remarks>
            <param name="propertyName">The name of the property.  The property mustimplement IScriptArray, a member of this driver, and must be decorated with the [SupportsPropertyBinding] attribute.</param>
            <param name="propertyIndex">The index of the value in the IScriptArray.</param>
            <param name="newPropertyValue">The value of the property. Valid datatypes are String, numeric types, Boolean, DateTime, byte[], ScriptString, ScriptNumber, ScriptBoolean, ScriptDateTime, ScriptByteArray, ScriptImage.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.GetAllPropertyValues(System.Boolean)">
            <summary>
            Since remoting MarshalByRefObject objects requires bi-directional connectivity (which is tricky when using NAT) and is slow,
            use this method to serialize all the instance property values.
            </summary>
            <returns></returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.Log(System.String,CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)">
            <summary>
            Logs a message to the system log.  This method will NOT throw an exception.
            </summary>
            <param name="message">The text to log.</param>
            <param name="severity">The severity of the event.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.Log(System.String,System.Exception,CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)">
            <summary>
            Logs a message and exception information to the system log.  This method will NOT throw an exception.
            </summary>
            <param name="message">The text to log.</param>
            <param name="ex">The exception.</param>
            <param name="severity">The severity of the event.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.IsDigitallySigned(System.Type)">
            <summary>
            Indicates if this driver has a valid digital signature.
            </summary>
            <param name="driverType"></param>
            <returns></returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.HandleDevicePropertyChangeNotification(SharedLibrary.DevicePropertyValueChange)">
            <summary>
            The method can be overridden to handle property change notifications which occur in any device. This method should never be called by the driver. Whenever any device calls DevicePropertyChangeNotification(), this method will be called to give any devices a chance to handle the change notification.
            </summary>
            <param name="notification">Contains information about the device property value change.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.HandleDeviceEventNotification(System.String,System.String,CodecoreTechnologies.Elve.DriverFramework.DriverEventArgDictionary)">
            <summary>
            This method can be overridden to handle events which occur in any device. This method should never be called by the driver.
            </summary>
            <param name="deviceName">The unique name (aka Scripting Identifier) of the device in which the event occurred.</param>
            <param name="eventName">The member name of the event which occurred within the specified device.</param>
            <param name="eventArgs">The event arguments.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.HandleAddedRule(CodecoreTechnologies.Elve.DriverFramework.DriverEvent,CodecoreTechnologies.Elve.DriverFramework.IRule)">
            <summary>
            This method can be overridden to handle rule which has been added to a driver event. Most drivers do not need to override this.
            This gets invoked for each rule that is added to the driver when the device starts up and when a rule is changed or added to the system later.
            </summary>
            <param name="driverEvent">The event which the rule was added to. You can compare this reference to the events in the driver.</param>
            <param name="rule">The added rule.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.HandleRemovedRule(CodecoreTechnologies.Elve.DriverFramework.DriverEvent,CodecoreTechnologies.Elve.DriverFramework.IRule)">
            <summary>
            This method can be overridden to handle rule which has been removed from a driver event. Most drivers do not need to override this.
            This gets invoked when a rule is deleted or changed.
            </summary>
            <param name="driverEvent">The event which the rule was removed from. You can compare this reference to the events in the driver.</param>
            <param name="rule">The rule which was added.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.RaiseDeviceEvent(CodecoreTechnologies.Elve.DriverFramework.DriverEvent)">
            <summary>
            Raises the event by executing all associated rules and notifying other device and components that the event has occurred.
            </summary>
            <param name="driverEvent">The event to raise.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.RaiseDeviceEvent(CodecoreTechnologies.Elve.DriverFramework.DriverEvent,CodecoreTechnologies.Elve.DriverFramework.DriverEventParameterDictionary)">
            <summary>
            Raises the event by executing associated rules with matching event parameters and notifying other device and components that the event has occurred.
            </summary>
            <param name="driverEvent">The event to raise.</param>
            <param name="eventParametersToMatch">The actual parameters for the event which will be compared with the rule's event parameter filters.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.RaiseDeviceEvent(CodecoreTechnologies.Elve.DriverFramework.DriverEvent,CodecoreTechnologies.Elve.DriverFramework.DriverEventArgDictionary)">
            <summary>
            Raises the event by executing all associated rules and notifying other devices and components that the event has occurred.
            </summary>
            <param name="driverEvent">The event to raise.</param>
            <param name="eventArgs">The event argument values which will be available via the scripting language when executing any rules.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.RaiseDeviceEvent(CodecoreTechnologies.Elve.DriverFramework.DriverEvent,CodecoreTechnologies.Elve.DriverFramework.DriverEventParameterDictionary,CodecoreTechnologies.Elve.DriverFramework.DriverEventArgDictionary)">
            <summary>
            Raises the event by executing associated rules with matching event parameters and notifying other devices and components that the event has occurred.
            </summary>
            <param name="driverEvent">The event to raise.</param>
            <param name="eventParametersToMatch">The actual parameters for the event which will be compared with the rule's event parameter filters.</param>
            <param name="eventArgs">The event argument values which will be available via the scripting language when executing any rules.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.InvokeDeviceMethod(System.String,System.String,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject[])">
            <summary>
            Invokes the specified device method. This allows a device to invoke a method on any other device. Do not use this to invoke a method in the current device as that would be very inefficient. This method will throw an exception if the device method is inaccessible, for example if the device is disabled, the driver service isn't running, or the device doesn't exist.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="methodName">The name of the device method (case insensitive).</param>
            <param name="parameterValues">The parameter values to pass to the method in the order they are declared.</param>
            <rereturns>The result of the method invocation.</rereturns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.GetDevicePropertyValue(System.String,System.String)">
            <summary>
            Gets the value of the specified device and property. This allows a device to retrieve a property value from any other device. Do not use this to get a property value from the current device as that would be very inefficient. This method will throw an exception if the device property is inaccessible, for example if the device is disabled, the driver service isn't running, or the device doesn't exist.  If the return value is a an immutible or value type (ScriptString, ScriptNumber, ScriptBoolean, ScriptDateTime, and ScriptTimeSpan) then a local non-transparent proxied copy of the object will be returned.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="propertyName">The name of the device property (case insensitive).</param>
            <returns>The value of the device property.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.GetDevicePropertyValue(System.String,System.String,System.Int32)">
            <summary>
            Gets the value of a property array element from a device. This allows a device to retrieve a property value from any other device. Do not use this to get a property value from the current device as that would be very inefficient. This method will throw an exception if the device property is inaccessible, for example if the device is disabled, the driver service isn't running, or the device doesn't exist. If the return value is a an immutible or value type (ScriptString, ScriptNumber, ScriptBoolean, ScriptDateTime, and ScriptTimeSpan) then a local non-transparent proxied copy of the object will be returned.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias (case insensitive)).</param>
            <param name="propertyName">The name of the device property array (case insensitive).</param>
            <param name="propertyIndex">The index of the array element to get.</param>
            <returns>The value of the device property.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.SetDevicePropertyValue(System.String,System.String,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject)">
            <summary>
            Sets the value of the specified device property. This allows a device to set a property value in any other device. Do not use this to set a property value in the current device as that would be very inefficient. This method will throw an exception if the device property is inaccessible, for example if the device is disabled, the driver service isn't running, or the device doesn't exist.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="propertyName">The name of the device property (case insensitive).</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.SetDevicePropertyValue(System.String,System.String,System.Int32,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject)">
            <summary>
            Sets the value of the specified device property array element. This allows a device to set a property value in any other device. Do not use this to set a property value in the current device as that would be very inefficient. This method will throw an exception if the device property is inaccessible, for example if the device is disabled, the driver service isn't running, or the device doesn't exist.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="propertyName">The name of the device property (case insensitive).</param>
            <param name="propertyIndex">The index of the array element to set.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.ToggleBooleanDevicePropertyValue(System.String,System.String)">
            <summary>
            Toggles the specified boolean device property's state. Do not use this to toggle a boolean property value in the current device as that would be very inefficient. This method will throw an exception if the device property is inaccessible, for example if the device is disabled, the driver service isn't running, or the device doesn't exist.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="propertyName">The name of the device property (case insensitive).</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.ToggleBooleanDevicePropertyValue(System.String,System.String,System.Int32)">
            <summary>
            Toggles the specified boolean device property array element's state. Do not use this to toggle a boolean property value in the current device as that would be very inefficient. This method will throw an exception if the device property is inaccessible, for example if the device is disabled, the driver service isn't running, or the device doesn't exist.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="propertyName">The name of the device property (case insensitive).</param>
            <param name="propertyIndex">The index of the boolean array element to toggle.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.OffsetNumericDevicePropertyValue(System.String,System.String,System.Double)">
            <summary>
            Increments or Decrements the specified numeric device property value. The property type must be ScriptNumeric. Do not use this to offset a numeric property value in the current device as that would be very inefficient. This method will throw an exception if the device property is inaccessible, for example if the device is disabled, the driver service isn't running, or the device doesn't exist.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="propertyName">The name of the device property (case insensitive).</param>
            <param name="offset">The positive or negative value to offset the current property value by.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.OffsetNumericDevicePropertyValue(System.String,System.String,System.Int32,System.Double)">
            <summary>
            Increments or Decrements the specified numeric device property's value. The property type must be ScriptNumeric. Do not use this to offset a numeric property value in the current device as that would be very inefficient. This method will throw an exception if the device property is inaccessible, for example if the device is disabled, the driver service isn't running, or the device doesn't exist.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="propertyName">The name of the device property (case insensitive).</param>
            <param name="propertyIndex">The index of the boolean array element to offset.</param>
            <param name="offset">The positive or negative value to offset the current property value by.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.RunScript(System.String,System.String,System.Boolean)">
            <summary>
            Runs a script.
            </summary>
            <param name="scriptName">The name of the script to use when logging errors.</param>
            <param name="script">The script contents to run.</param>
            <param name="throwError">Indicates if an exception should be thrown if an error occurs when running the script.</param>
            <returns>The return value of the script.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.RunScript(System.String,System.String,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Runs a script.
            </summary>
            <param name="scriptName">The name of the script to use when logging errors.</param>
            <param name="script">The script contents to run.</param>
            <param name="throwError">Indicates if an exception should be thrown if an error occurs when running the script.</param>
            <param name="runAsync">Indicates if the script should be run asynchronously and the method should be non-blocking.</param>
            <param name="variables_Name_comma_ScriptObject">An alternating list of variable name and variable values. Ex: "var1", var1, "var2", var2. Where var1 and var2 are of type IScriptObject.</param>
            <returns>The return value of the script.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.SetPropertyAfterDelayAsync(System.String,System.TimeSpan,System.String,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject)">
            <summary>
            Schedules a device property to be set asynchronously after a specified amount of time. Subsequent sets of the same property using the same key parameter will reset the timer if the timer has not yet elapsed.
            </summary>
            <param name="key">A unique key so that subsequent calls can reset the timer if the key is the same.</param>
            <param name="duration">The amount of time to wait after setting the initial value to set the subsequent value.</param>
            <param name="propertyName">The property to set.</param>
            <param name="propertyValue">The value to set the property to after the duration of time has passed..</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.SetPropertyAfterDelayAsync(System.String,System.TimeSpan,System.String,System.Int32,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject)">
            <summary>
            Schedules a device property array element to be set asynchronously after a specified amount of time. Subsequent sets of the same property using the same key parameter will reset the timer if the timer has not yet elapsed.
            </summary>
            <param name="key">A unique key so that subsequent calls can reset the timer if the key is the same.</param>
            <param name="duration">The amount of time to wait after setting the initial value to set the subsequent value.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="arrayIndex">The property's array index to set.</param>
            <param name="propertyValue">The value to set the property to after the duration of time has passed.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.InvokeMethodAfterDelayAsync(System.String,System.TimeSpan,System.String,CodecoreTechnologies.Elve.DriverFramework.Scripting.IScriptObject[])">
            <summary>
            Schedules a device method to be invoked asynchronously after a specified duration of time. Subsequent calls to the same method using the same key parameter will reset the timer if the timer has not yet elapsed.
            </summary>
            <param name="key">A unique key so that subsequent calls can reset the timer if the key is the same.</param>
            <param name="duration">The amount of time to wait after invoking the first method to invoke the second method.</param>
            <param name="methodName">The name of the second method to invoke after the duration of time has passed.</param>
            <param name="methodParameters">The method parameters to pass to the second method after the duration of time has passed.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.GetDevicePropertyHistory(System.String,System.String,System.Int32,System.DateTime,System.DateTime,System.TimeSpan,CodecoreTechnologies.Elve.DriverFramework.Scripting.DevicePropertyHistoryMode)">
            <summary>
            Returns device property values from the available recorded history of a device property.
            </summary>
            <param name="deviceName">The name of the device (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="propertyName">The name of the device property (case insensitive).</param>
            <param name="propertyIndex">The property index. Use -1 if the property is not an array.</param>
            <param name="startDateTimeUTC">The UTC date and time of the first value.</param>
            <param name="endDateTimeUTC">The UTC date and time of the last value.</param>
            <param name="interval">The time interval between each value to retieve.</param>
            <param name="mode">Indicates how to process each interval when multiple values were available within the interval.</param>
            <returns>A list of date/times and corresponding device property values.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Driver.GetDevicePropertyHistory(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Int32},System.DateTime,System.DateTime,System.TimeSpan,CodecoreTechnologies.Elve.DriverFramework.Scripting.DevicePropertyHistoryMode)">
            <summary>
            Returns an array of property values from the available recorded history of a multiple device properties.
            </summary>
            <param name="deviceNames">The name of the devices (also known as scripting identifier or alias) (case insensitive).</param>
            <param name="propertyNames">The names of the device properties (case insensitive).</param>
            <param name="propertyIndexes">The property indexes. Use -1 if a property is not an array.</param>
            <param name="startDateTimeUTC">The UTC date and time of the first value.</param>
            <param name="endDateTimeUTC">The UTC date and time of the last value.</param>
            <param name="interval">The time interval between each value to retieve.</param>
            <param name="mode">Indicates how to process each interval when multiple values were available within the interval.</param>
            <returns>An array of ScriptDevicePropertyHistory objects, each of which is a list of date/times and corresponding device property values.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Driver.LocalDeviceDataDirectoryPath">
            <summary>
            Returns the directory path that the driver can use to store data on the machine running the driver. The driver is responsible for creating the directory before reading/writing to it.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Driver.IsReady">
            <summary>
            Gets or sets whether all properties are valid and all methods are ready to be used.  This value is initially set to the return value of StartDriver(), then the driver developer can change this property based on the whether the device is connected to the hardware and it's ready to be used.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Driver.ConfigurationFileNames">
            <summary>
            Returns a list of configuration file names that the driver requires.  The files will be read from the same folder that the master server configuration file exists in.
            If your driver needs configuration file(s), override this property.  By default this returns an empty array.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.IRDriverBase.GetIRCodeByIRDeviceDotIRCodeName(System.String)">
            <summary>
            Gets a collection of named ir codes for the specified irdevicename.ircodename.
            </summary>
            <param name="irDeviceDotIRCodeName">The IR device and IR code name using the following format: irdevicename.ircodename</param>
            <returns>A collection of named ir codes</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.IRDriverBase.loadScriptIRDevices(System.Collections.Generic.Dictionary{System.String,System.Byte[]})">
            <summary>
            Reads the IRDevices XML and creates a script object for each specified device.
            </summary>
            <param name="configFileData">This should include the "IRLibrary.xml" file.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Extensions.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            Reads data from a stream until the end is reached. The
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            If the stream does not support the Length property (such as a NetworkStream) then this will read whatever is available into the buffer which is not terribly efficient, as it ends up copying the data at the very end, and probably several times between.
            </summary>
            <param name="stream">The stream to read data from</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Extensions.StreamExtensions.ReadAllBytes(System.IO.Stream,System.Int64)">
            <summary>
            Reads data from a stream until the end is reached. The
            data is returned as a byte array. An IOException is
            thrown if any of the underlying IO calls fail.
            This works well if you know the expected length of data to start with. (While you could use Stream.Length, it isn't supported for all streams.)
            </summary>
            <param name="stream">The stream to read data from</param>
            <param name="initialLength">The initial buffer length.</param>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaPlayerDriver.SupportedPlaylistFileTypes">
            <summary>
            Indicates the playlist file extensions which the driver supports. If none, then return an empty array.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaPlayerDriver.SupportsPlaylistIDFromCompanionMediaLibrary">
            <summary>
            Indicates if the media player driver accepts playlist id's from a companion media library driver.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaPlayerDriver.ZoneRepeatModes">
            <summary>Off = 0, Song = 1, Playlist = 2</summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.WeatherChannelLocationIDDriverSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.WeatherChannelLocationIDDriverSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.WeatherChannelLocationIDDriverSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.TTSVoiceDeviceSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.TTSVoiceDeviceSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.TTSVoiceDeviceSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.IRDeviceListDriverSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.IRDeviceListDriverSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.IRDeviceListDriverSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Extensions.StringsExtensions.ToFriendlyName(System.String,System.Boolean)">
             <summary>
             returns a friendly name of a string
             eg. "SomeUtilsText" becomes "Some Utils Text"
             eg2. "BillInvoiceID" becomes "Bill Invoice" if trimIDText = true
             
             "UseSSL" becomes "Use SSL"
             "UseSslAndSmtp" becomes "Use Ssl And Smtp"
             "UseSslAndSMTP" becomes "Use Ssl And SMTP"
             "UseSSLAndSmtp" becomes "Use SSL And Smtp"
            
             </summary>
             <param name="input">the input string</param>
             <param name="trimIDText">if "ID" text should be cut off the end of the string</param>
             <returns>a friendly name string</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Extensions.StringsExtensions.Split(System.String,System.Char,System.Char,System.Boolean)">
            <summary>
            Splits a string by a delimiter respecting a quote characters and ignoring delimiters that are bound by quotes.  Embedded quotes must be padded, such as 'O''Brien'.
            </summary>
            <param name="s">The string to split.</param>
            <param name="delimiter">The character which delimits the substrings.</param>
            <param name="quote">The character which may be used to bound substrings.</param>
            <param name="stripBoundingQuotes">If true then the returned strings will have their bounding quotes removed and padded quotes reduced to one quote.</param>
            <returns>Returns a StringCollection of substrings from the given s.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Extensions.StringsExtensions.Split(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Splits a string by a delimiter respecting a quote characters and ignoring delimiters that are bound by quotes.  Embedded quotes must be padded, such as 'O''Brien'.
            </summary>
            <param name="s">The string to split.</param>
            <param name="delimiter">The character which delimits the substrings.</param>
            <param name="quote">The character which may be used to bound substrings.</param>
            <param name="stripBoundingAndEscapedQuotes">If true then the returned strings will have their bounding quotes removed and padded quotes reduced to one quote.</param>
            <param name="allowNewLineInValues"></param>
            <returns>Returns a StringCollection of substrings from the given s.</returns>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication">
            <summary>
            The TcpTcpCommunication class provides a Silverlight compatible tcp client. Silverlight does not support the TcpClient class so this class was created to use Sockets which Silverlight does support.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the TcpCommunication class.
            A connection is not established until Open() or StartMonitoring() is called.
            </summary>
            <param name="hostName">The DSN name of the remote host to which you indend to connect.</param>
            <param name="port">The port number of the remote host to which you indend to connect.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.#ctor(System.String,System.Int32,System.Net.IPEndPoint)">
            <summary>
            Initializes a new instance of the TcpCommunication class.
            A connection is not established until Open() or StartMonitoring() is called.
            </summary>
            <param name="hostName">The DSN name of the remote host to which you indend to connect.</param>
            <param name="port">The port number of the remote host to which you indend to connect.</param>
            <param name="localEndPoint">The local EndPoint to associate with the Socket.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Create a TcpCommunication object using an already open Socket.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.Open(System.String,System.Int32)">
            <summary>
            Opens a new TCP connection using the specified address and port.
            </summary>
            <param name="hostName">The DSN name of the remote host to which you indend to connect.</param>
            <param name="port">The port number of the remote host to which you indend to connect.</param>
            <exception cref="T:System.ArgumentNullException">The hostname parameter is nullNothingnullptra null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The port parameter is not between MinPort and MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. use SocketException.ErrorCode to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
            <remarks>
            This makes a synchronous connection attempt to the provided host name and port number and will block until it either connects or fails. The underlying service provider will assign the most appropriate local IP address and port number.
            </remarks>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.Open">
            <summary>
            Opens a new TCP connection using the address and port specified in the constructor.
            </summary>
            <exception cref="T:System.ArgumentNullException">The hostname parameter is nullNothingnullptra null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The port parameter is not between MinPort and MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. use SocketException.ErrorCode to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
            <remarks>
            This makes a synchronous connection attempt to the provided host name and port number and will block until it either connects or fails. The underlying service provider will assign the most appropriate local IP address and port number.
            </remarks>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.Dispose">
            <summary>
            Releases all resources used by the TcpCommunication.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.Send(System.Byte[])">
            <summary>
            Enqueue a byte array to be sent as soon as all previously queued items have been sent.
            </summary>
            <param name="data">The byte array to enqueue to send.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.Send(System.Byte[],System.Int32)">
            <summary>
            Enqueue a byte array to be sent the specified milliseconds after the previously queued item has been sent.
            </summary>
            <param name="data">The byte array to enqueue to send</param>
            <param name="delayMilliseconds">The number of milliseconds to wait to send the byte array after the prior send has occurred.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.SimulateReceivedData(System.String)">
            <summary>
            Simulate data being received from the tcp connection. The data will be processed as if it were actually received as incoming data from the tcp connection. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.SimulateReceivedData(System.Byte[])">
            <summary>
            Simulate data being received from the tcp connection. The data will be processed as if it were actually received as incoming data from the tcp connection. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.TcpCommunication.Connected">
            <summary>
            Indicates if the pc is successfully communicating via tcp.
            
            If connection monitoring is disabled this will only be true as long a tcp connection was established and sending data does not cause an error.
            If connection monitoring is enabled this will only be true if a tcp connection was established, sending data does not cause an error, and the device consistantly sends data to the pc within a specified time limit.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround">
            <summary>
            This class provides an workaround to the SerialPort class issue which crashes an application when some USB serial port adapters are removed from the usb port.
            See: http://connect.microsoft.com/VisualStudio/feedback/details/140018/serialport-crashes-after-disconnect-of-usb-com-port
            See also: http://connect.microsoft.com/VisualStudio/feedback/details/426766/net-serialport-and-ftdi-usb-driver-unauthorizedaccessexception
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"/> class using the specified <see cref="T:System.ComponentModel.IContainer"/> object.
            </summary>
            <param name="container">An interface to a container. </param><exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"/> class.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"/> class using the specified port name.
            </summary>
            <param name="portName">The port to use (for example, COM1). </param><exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"/> class using the specified port name and baud rate.
            </summary>
            <param name="portName">The port to use (for example, COM1). </param><param name="baudRate">The baud rate. </param><exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround.#ctor(System.String,System.Int32,System.IO.Ports.Parity)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"/> class using the specified port name, baud rate, and parity bit.
            </summary>
            <param name="portName">The port to use (for example, COM1). </param><param name="baudRate">The baud rate. </param><param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity"/> values. </param><exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"/> class using the specified port name, baud rate, parity bit, and data bits.
            </summary>
            <param name="portName">The port to use (for example, COM1). </param><param name="baudRate">The baud rate. </param><param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity"/> values. </param><param name="dataBits">The data bits value. </param><exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            Initializes a new instance of the <see cref="T:System.IO.Ports.SerialPort"/> class using the specified port name, baud rate, parity bit, data bits, and stop bit.
            </summary>
            <param name="portName">The port to use (for example, COM1). </param><param name="baudRate">The baud rate. </param><param name="parity">One of the <see cref="P:System.IO.Ports.SerialPort.Parity"/> values. </param><param name="dataBits">The data bits value. </param><param name="stopBits">One of the <see cref="P:System.IO.Ports.SerialPort.StopBits"/> values. </param><exception cref="T:System.IO.IOException">The specified port could not be found or opened.</exception>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The specified port is open. </exception><exception cref="T:System.ArgumentOutOfRangeException">One or more of the properties for this instance are invalid. For example, the <see cref="P:System.IO.Ports.SerialPort.Parity"/>, <see cref="P:System.IO.Ports.SerialPort.DataBits"/>, or <see cref="P:System.IO.Ports.SerialPort.Handshake"/> properties are not valid values; the <see cref="P:System.IO.Ports.SerialPort.BaudRate"/> is less than or equal to zero; the <see cref="P:System.IO.Ports.SerialPort.ReadTimeout"/> or <see cref="P:System.IO.Ports.SerialPort.WriteTimeout"/> property is less than zero and is not <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout"/>. </exception><exception cref="T:System.ArgumentException">The port name does not begin with "COM". - or -The file type of the port is not supported.</exception><exception cref="T:System.IO.IOException">The port is in an invalid state.  - or - An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"/> object were invalid.</exception><exception cref="T:System.UnauthorizedAccessException">Access is denied to the port. </exception><PermissionSet><IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="UnmanagedCode, ControlEvidence"/></PermissionSet>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialPortWorkaround.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:System.IO.Ports.SerialPort"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param><exception cref="T:System.IO.IOException">The port is in an invalid state.  - or -An attempt to set the state of the underlying port failed. For example, the parameters passed from this <see cref="T:System.IO.Ports.SerialPort"/> object were invalid.</exception>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.InitialGlobalVariablesDriverSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.InitialGlobalVariablesDriverSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.InitialGlobalVariablesDriverSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.DatabaseLogColumnSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.DatabaseLogColumnSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.DatabaseLogColumnSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.EditEventParameterForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.EditEventParameterForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.EditEventParameterForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the UdpCommunication class.
            The class will not listen for incoming data until Open() is called.
            </summary>
            <param name="hostName">The DSN name of the remote host to which you indend to connect. Specify "255.255.255.255" for the hostname to use broadcast.</param>
            <param name="port">The port number of the remote host to which you indend to connect.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.#ctor(System.Net.Sockets.Socket,System.Net.IPEndPoint)">
            <summary>
            Create a UdpCommunication object using an existing Socket.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.Open(System.String,System.Int32)">
            <summary>
            Start listening on the specified UDP port and indicate what ip address to send data to. Specify "255.255.255.255" for the hostname to broadcast.
            </summary>
            <param name="hostName">The DSN name of the remote host to which you indend to connect. Specify "255.255.255.255" for the hostname to broadcast.</param>
            <param name="port">The port number of the remote host to which you indend to connect.</param>
            <exception cref="T:System.ArgumentNullException">The hostname parameter is nullNothingnullptra null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The port parameter is not between MinPort and MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. use SocketException.ErrorCode to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
            <remarks>
            This makes a synchronous connection attempt to the provided host name and port number and will block until it either connects or fails. The underlying service provider will assign the most appropriate local IP address and port number.
            </remarks>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.Open">
            <summary>
            Starts listening on the specified UDP port specified in the constructor.
            </summary>
            <exception cref="T:System.ArgumentNullException">The hostname parameter is a null reference (Nothing in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The port parameter is not between MinPort and MaxPort.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurred when accessing the socket. use SocketException.ErrorCode to obtain the specific error code. After you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error.</exception>
            <remarks>
            This makes a synchronous connection attempt to the provided host name and port number and will block until it either connects or fails. The underlying service provider will assign the most appropriate local IP address and port number.
            </remarks>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.Dispose">
            <summary>
            Releases all resources used by the UdpCommunication.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.SimulateReceivedData(System.String)">
            <summary>
            Simulate data being received from the udp connection. The data will be processed as if it were actually received as incoming data from the udp connection. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.SimulateReceivedData(System.Byte[])">
            <summary>
            Simulate data being received from the udp connection. The data will be processed as if it were actually received as incoming data from the udp connection. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.StartConnectionMonitor">
            <summary>
            Connection Monitoring is not supported with UDP so this member will always throw an exception.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.StartConnectionMonitorSync">
            <summary>
            Connection Monitoring is not supported with UDP so this member will always throw an exception.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.StopConnectionMonitor">
            <summary>
            Connection Monitoring is not supported with UDP so this member will always throw an exception.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.Connected">
            <summary>
            UDP is a connection-less protocol and is therefore never connected so this will always return false.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.ConnectionMonitorEnabled">
            <summary>
            Connection Monitoring is not supported with UDP so this member will always throw an exception.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.ConnectionMonitorTestBytes">
            <summary>
            Connection Monitoring is not supported with UDP so this member will always throw an exception.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.ConnectionMonitorTestRequest">
            <summary>
            Connection Monitoring is not supported with UDP so this member will always throw an exception.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.UdpCommunication.ConnectionMonitorTimeout">
            <summary>
            Connection Monitoring is not supported with UDP so this member will always throw an exception.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptEvaluatorException">
            <summary>
            This type of exception is thown by the Expression Evaluator.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptEvaluatorException.#ctor(System.String)">
            <summary>Initializes a new instance of the ScriptEvaluatorException class with a specified error message.</summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptEvaluatorException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ScriptEvaluatorException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception. If the innerException parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Utilities.DateTimeTimer">
            <summary>
            A timer which elapses at a specified date and time.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.DateTimeTimer.PauseTimer">
            <summary>
            Disable the timer but remembers when to fire if we want to resume/enable it again
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.DateTimeTimer.ResumeTimer">
            <summary>
            Start the timer back up after having paused it.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.DateTimeTimer.StopTimer">
            <summary>
            Stop the timer and clear the time to fire
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.DateTimeTimer.SetTimer(System.DateTime)">
            <summary>
            Passing in 0 disables the timer
            </summary>
            <param name="thedatetime">The Date and Time when the timer should fire.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.DateTimeTimer.SetTimer(System.DateTime,System.Object)">
            <summary>
            Passing in 0 disables the timer
            </summary>
            <param name="thedatetime">The Date and Time when the timer should fire.</param>
            <param name="timerdata">Anything the user wants to associate the timer with, like an index for something.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.DateTimeTimer.setTimerIntervalAndEnable">
            <summary>
            Sets the interval to whichever is less: 1/4 of a second or the time to the event time
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptPosition.PositionInScript">
            <summary>
            Zero based position in script. (1st position = 0)
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptPosition.LineNumber">
            <summary>
            One based line number. (1st line = 1)
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptPosition.PositionInLine">
            <summary>
            Zero based position in line. (1st character position = 0)
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IIRReceiverDriver.Learn">
            <summary>
            Learns an infrared command with all the information, such as transmission frequencies; required to correctly recreate infrared signals for playback.
            </summary>
            <returns>The learned infrared command.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IIRReceiverDriver.Listen">
            <summary>
            Retrieves the next received infrared command.  For some devices this is different than the Learn method in that it does not retrieve all the necessary information to recreate infrared signals for playback.
            </summary>
            <returns>The received infrared command.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IIRReceiverDriver.IRCommandFormatName">
            <summary>
            The name of the ir command format.  This is often times just the name of the ir receiver device unless it uses a well known command format such as "Pronto".
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.TimeZoneDeviceSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.TimeZoneDeviceSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.TimeZoneDeviceSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Utilities.X10CommandCode">
            <summary>
            The standard X10 Command codes.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.X10Utility.GetBase0DeviceIndexFromX10(System.Char,System.Int32)">
            <summary>
            Converts an X10 house code and unit code to a base 0 device number for use with arrays. 0-255.
            </summary>
            <param name="houseCode">'A'-'P'</param>
            <param name="unitCode_base1">1-16</param>
            <returns>A base 0 device number (0-255).</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.X10Utility.GetBase1DeviceIndexFromX10(System.Char,System.Int32)">
            <summary>
            Converts an X10 house code and unit code to a base 1 device number. 1-256.
            </summary>
            <param name="houseCode">'A'-'P'</param>
            <param name="unitCode_base1">1-16</param>
            <returns>A base 1 device number (0-255).</returns>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Utilities.ImageSizeMode.Normal">
            <summary>
            The image is placed in the upper-left corner of the System.Windows.Forms.PictureBox.
            The image is clipped if it is larger than the System.Windows.Forms.PictureBox
            it is contained in.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Utilities.ImageSizeMode.StretchImage">
            <summary>
            The image within the System.Windows.Forms.PictureBox is stretched or shrunk
            to fit the size of the System.Windows.Forms.PictureBox.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Utilities.ImageSizeMode.AutoSize">
            <summary>
            The System.Windows.Forms.PictureBox is sized equal to the size of the image
            that it contains. This means that the control's actual bounds are changed to
            be equal to the size of the image.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Utilities.ImageSizeMode.CenterImage">
            <summary>
            The image is displayed in the center if the System.Windows.Forms.PictureBox
            is larger than the image. If the image is larger than the System.Windows.Forms.PictureBox,
            the picture is placed in the center of the System.Windows.Forms.PictureBox
            and the outside edges are clipped.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Utilities.ImageSizeMode.Zoom">
            <summary>
            The size of the image is increased or decreased maintaining the size ratio.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.GraphicsUtility.CompareBitmapsByColor(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Double)">
            <summary>
            Determines how different 2 images are.
            </summary>
            <param name="bm1">The first image.</param>
            <param name="bm2">The second image.</param>
            <param name="pixelTolerance">The % tolerance that a pixel can be different before it is considered different. 0 to 1.</param>
            <returns>Returns how different the images are as a percent.  0 = Same, 1 = 100% Different</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.GraphicsUtility.CompareBitmapsByColorFast(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Double)">
            <summary>
            Determines how different 2 images are.
            </summary>
            <param name="bm1">The first image.</param>
            <param name="bm2">The second image.</param>
            <param name="pixelTolerance">The % tolerance that a pixel can be different before it is considered different. 0 to 1.</param>
            <returns>Returns how different the images are as a percent.  0 = Same, 1 = 100% Different</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.GraphicsUtility.CompareBitmapsVisually(System.Drawing.Bitmap,System.Drawing.Bitmap,System.Double)">
            <summary>
            Compares two images an returns an image with the differences as white pixels.
            </summary>
            <param name="bm1">The first image.</param>
            <param name="bm2">The second image.</param>
            <param name="pixelTolerance">The % tolerance that a pixel can be different before it is considered different. 0 to 1.</param>
            <returns>An image with the differences as white pixels</returns>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.DateFormatDeviceSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.DateFormatDeviceSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.DateFormatDeviceSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.DateTimeDriverEventParameterForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.DateTimeDriverEventParameterForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.DateTimeDriverEventParameterForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Debug(System.Object)">
            <summary>
            Logs a message to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Info(System.Object)">
            <summary>
            Logs a message to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.SystemMsg(System.Object)">
            <summary>
            Logs a message to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Warning(System.Object)">
            <summary>
            Logs a message to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Error(System.Object)">
            <summary>
            Logs a message to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Fatal(System.Object)">
            <summary>
            Logs a message to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Debug(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Info(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.SystemMsg(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Warning(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Error(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Fatal(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Debug(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Info(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.SystemMsg(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Warning(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Error(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Fatal(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Debug(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Info(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.SystemMsg(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Warning(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Error(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Debug(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Info(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.SystemMsg(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Warning(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Error(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.Fatal(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.SystemMsgFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.WarningFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.ILogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.#ctor(SharedLibrary.LoggerContextType,System.String,SharedLibrary.LoggerVerbosity)">
            <summary>
            Instantiates an ILogger with the specified contect type, context and verbosity.
            </summary>
            <param name="contextType"></param>
            <param name="context"></param>
            <param name="loggingVerbosity"></param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Debug(System.Object)">
            <summary>
            Logs a message to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Info(System.Object)">
            <summary>
            Logs a message to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.SystemMsg(System.Object)">
            <summary>
            Logs a message to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Warning(System.Object)">
            <summary>
            Logs a message to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Error(System.Object)">
            <summary>
            Logs a message to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Fatal(System.Object)">
            <summary>
            Logs a message to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Debug(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Info(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.SystemMsg(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Warning(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Error(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Fatal(System.Object,System.Byte[])">
            <summary>
            Logs a message to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Debug(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Info(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.SystemMsg(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Warning(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Error(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Fatal(System.Object,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Logs a message to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Debug(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Info(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.SystemMsg(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Warning(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Error(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Debug(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Info(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.SystemMsg(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Warning(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Error(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Fatal(System.Object,System.Byte[],System.Exception)">
            <summary>
            Logs a message and exception information to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Debug severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Information severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.SystemMsgFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the SystemMessage severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.WarningFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Warning severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Error severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string to the system log with the Fatal severity.  This method will NOT throw an exception.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Log(System.Object,CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)">
            <summary>
            Logs a message to the system log.  This method will NOT throw an exception.
            </summary>
            <param name="message">The text to log.</param>
            <param name="severity">The severity of the event.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Log(System.Object,System.Byte[],System.Int32,System.Int32,CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)">
            <summary>
            Logs a message to the system log.  This method will NOT throw an exception.
            </summary>
            <param name="message">The text to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
            <param name="severity">The severity of the event.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Log(System.Object,System.Byte[],CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)" -->
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Log(System.Object,System.Exception,CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)">
            <summary>
            Logs a message and exception information to the system log.  This method will NOT throw an exception.
            </summary>
            <param name="message">The text to log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
            <param name="severity">The severity of the event.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Log(System.Object,System.Byte[],System.Exception,CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)">
            <summary>
            Logs a message and exception information to the system log.  This method will NOT throw an exception.
            </summary>
            <param name="message">The text to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
            <param name="severity">The severity of the event.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StandardLogger.Log(System.Object,System.Byte[],System.Int32,System.Int32,System.Exception,CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)">
            <summary>
            Logs a message and exception information to the system log.  This method will NOT throw an exception.
            </summary>
            <param name="message">The text to log.</param>
            <param name="data">The byte data will be logged hexadecimal notation.</param>
            <param name="startIndex">The start index in data to be included in the log.</param>
            <param name="length">The length in data to be included in the log.</param>
            <param name="ex">The exception to log, including its stack trace.</param>
            <param name="severity">The severity of the event.</param>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity.Debug">
            <summary>
            Logged with Verbosity of Diagnostic.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity.Information">
            <summary>
            Logged with Verbosity of Detailed, and Diagnostic.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity.SystemMessage">
            <summary>
            Logged with Verbosity of Normal, Detailed, and Diagnostic.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity.Warning">
            <summary>
            Logged with Verbosity of Normal, Detailed, and Diagnostic.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity.Error">
            <summary>
            Logged with Verbosity of Minimal, Normal, Detailed, and Diagnostic.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity.Fatal">
            <summary>
            Logged with Verbosity of Minimal, Normal, Detailed, and Diagnostic.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IIRBlasterDriver.SendIR(System.Int32,CodecoreTechnologies.Elve.DriverFramework.Infrared.NamedIRCode,System.Int32,System.Int32)">
            <summary>
            Send/Blasts/Transmits the specified IR Code on the specified zone, the specified number of times, with the specified delay between resends.
            </summary>
            <param name="zoneID">Some IR blaster devices support multiple zones. This is the zone to send the ir code on.</param>
            <param name="irCode">The NamedIRCode object to send.</param>
            <param name="sendCount">Some IR blaster devices support full or partial retransmittion of the IR code.</param>
            <param name="delay">Some IR blaster devices support a delay between sends.</param>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IIRBlasterDriver.IRCommandFormatName">
            <summary>
            The name of the ir command format.  This is often times just the name of the ir receiver device unless it uses a well known command format such as "Pronto".
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptDeviceContainer.IsDeviceRunning">
            <summary>
            Indicates if the driver is running (ie. DriverInstance != null).
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.X10DevicesDriverSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.X10DevicesDriverSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.X10DevicesDriverSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.TemperatureScaleDeviceSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.TemperatureScaleDeviceSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.TemperatureScaleDeviceSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.#ctor">
            <summary>
            Initializes a new instance of the SerialDriverBase class. using 9600, 8, N, 1.
             A connection is not established until Open() or StartMonitoring() is called.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)">
            <summary>
            Initializes a new instance of the SerialDriverBase class using the specified serial port name.
             A connection is not established until Open() or StartMonitoring() is called.
            </summary>
            <param name="serialPortName">The serial port to use (for example, COM1).</param>
            <param name="baudRate">The baud rate.</param>
            <param name="parity">One of the Parity values.</param>
            <param name="dataBits">The data bits value. Usually 8.</param>
            <param name="stopBits">One of the StopBits values. Usually 1.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits,System.IO.Ports.Handshake,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the SerialDriverBase class using the specified serial port name.
             A connection is not established until Open() or StartMonitoring() is called.
            </summary>
            <param name="serialPortName">The serial port to use (for example, COM1).</param>
            <param name="baudRate">The baud rate.</param>
            <param name="parity">One of the Parity values.</param>
            <param name="dataBits">The data bits value. Usually 8.</param>
            <param name="stopBits">One of the StopBits values. Usually 1.</param>
            <param name="handShake">The handshake protocol. Usually none.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.Open(System.String)">
            <summary>
            Opens a new Serial connection using the specified serial port name.
            </summary>
            <exception cref="T:System.InvalidOperationException">The specified port is open.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            One or more of the properties for this instance are invalid. For example, the Parity, DataBits, or Handshake properties are not valid values; the BaudRate is less than or equal to zero; the ReadTimeout or WriteTimeout property is less than zero and is not InfiniteTimeout. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The port name does not begin with "COM". 
            - or -
            The file type of the port is not supported.
            </exception>
            <exception cref="T:System.IOException">
            The port is in an invalid state. 
            - or - 
            An attempt to set the state of the underlying port failed. For example, the parameters passed from this SerialPort object were invalid.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied to the port.</exception>
            <remarks>
            Only one open connection can exist per SerialCommunication object.
            The best practice for any application is to wait for some amount of time after calling the Close method before attempting to call the Open method, as the underlying serial port may not be closed instantly.
            </remarks>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.Open">
            <summary>
            Opens a new SerialDriverBase connection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The specified port is open.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            One or more of the properties for this instance are invalid. For example, the Parity, DataBits, or Handshake properties are not valid values; the BaudRate is less than or equal to zero; the ReadTimeout or WriteTimeout property is less than zero and is not InfiniteTimeout. 
            </exception>
            <exception cref="T:System.ArgumentException">
            The port name does not begin with "COM". 
            - or -
            The file type of the port is not supported.
            </exception>
            <exception cref="T:System.IOException">
            The port is in an invalid state. 
            - or - 
            An attempt to set the state of the underlying serial port failed.
            </exception>
            <exception cref="T:System.UnauthorizedAccessException">Access is denied to the port.</exception>
            <remarks>
            Only one open connection can exist per SerialDriverBase object.
            The best practice for any application is to wait for some amount of time after calling the Close method before attempting to call the Open method, as the underlying serial port may not be closed instantly.
            </remarks>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.Dispose">
            <summary>
            Releases all resources used by the SerialCommunication.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.SimulateReceivedData(System.String)">
            <summary>
            Simulate data being received from the serial port. The data will be processed as if it were actually received as incoming data from the serial ports. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.SimulateReceivedData(System.Byte[])">
            <summary>
            Simulate data being received from the serial port. The data will be processed as if it were actually received as incoming data from the serial ports. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.SerialPortName">
            <summary>
            Gets or sets the name of the serial port used for communications.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.Connected">
            <summary>
            Indicates if the pc is successfully communicating with the the serial device.
            
            If connection monitoring is disabled this will always be true as long as the serial port was successfully opened.
            If connection monitoring is enabled, this will only be true if the serial port was successfully opened and the device consistantly sends data to the pc within a specified time limit.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.BaudRate">
            <summary>
            Gets or sets the serial baud rate.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The baud rate specified is less than or equal to zero, or is greater than
            the maximum allowable baud rate for the device.
            </exception>
            <exception cref="T:System.IO.IOException">
            The port is in an invalid state. - or - An attempt to set the state of the
            underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort
            object were invalid.
            </exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.DataBits">
            <summary>
            Gets or sets the standard length of data bits per byte.
            </summary>
            <exception cref="T:System.IO.IOException">
            The port is in an invalid state. - or -An attempt to set the state of the
            underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort
            object were invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
             The data bits value is less than 5 or more than 8.
            </exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.Parity">
            <summary>
            Gets or sets the parity-checking protocol.
            </summary>
            <exception cref="T:System.IO.IOException">
            The port is in an invalid state. - or - An attempt to set the state of the
            underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort
            object were invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The System.IO.Ports.SerialPort.Parity value passed is not a valid value in
            the System.IO.Ports.Parity enumeration.
            </exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.StopBits">
            <summary>
            Gets or sets the standard number of stopbits per byte.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value of the System.IO.Ports.SerialPort.RtsEnable property was set or
            retrieved while the System.IO.Ports.SerialPort.Handshake property is set
            to the System.IO.Ports.Handshake.RequestToSend value or the System.IO.Ports.Handshake.RequestToSendXOnXOff
            value.
            </exception>
            <exception cref="T:System.IO.IOException">
            The port is in an invalid state. - or - An attempt to set the state of the
            underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort
            object were invalid.
            </exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.Handshake">
            <summary>
            Gets or sets the handshaking protocol for serial port transmission of data.
            </summary>
            <exception cref="T:System.IO.IOException">
            The port is in an invalid state. - or - An attempt to set the state of the
            underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort
            object were invalid.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value passed is not a valid value in the System.IO.Ports.Handshake enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed. This can occur because the System.IO.Ports.SerialPort.Open()
            method has not been called or the System.IO.Ports.SerialPort.Close() method
            has been called.
            </exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.RtsEnable">
            <summary>
            Gets or sets a value indicating whether the Request to Send (RTS) signal is enabled during serial communication.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The value of the System.IO.Ports.SerialPort.RtsEnable property was set or
            retrieved while the System.IO.Ports.SerialPort.Handshake property is set
            to the System.IO.Ports.Handshake.RequestToSend value or the System.IO.Ports.Handshake.RequestToSendXOnXOff
            value.
            </exception>
            <exception cref="T:System.IO.IOException">
            The port is in an invalid state. - or - An attempt to set the state of the
            underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort
            object were invalid.
            </exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.CtsHolding">
            <summary>
            Gets the state of the Clear-to-Send line.
            </summary>
            <exception cref="T:System.IO.IOException">
            The port is in an invalid state. - or - An attempt to set the state of the
            underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort
            object were invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed. This can occur because the System.IO.Ports.SerialPort.Open()
            method has not been called or the System.IO.Ports.SerialPort.Close() method
            has been called.
            </exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.DsrHolding">
            <summary>
            Gets the state of the Data Set Ready (DSR) signal.
            </summary>
            <exception cref="T:System.IO.IOException">
            The port is in an invalid state. - or - An attempt to set the state of the
            underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort
            object were invalid.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed. This can occur because the System.IO.Ports.SerialPort.Open()
            method has not been called or the System.IO.Ports.SerialPort.Close() method
            has been called.
            </exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.SerialCommunication.DtrEnable">
            <summary>
            Gets or sets a value that enables the Data Terminal Ready (DTR) signal during serial communication.
            </summary>
            <exception cref="T:System.IO.IOException">
            The port is in an invalid state. - or - An attempt to set the state of the
            underlying port failed. For example, the parameters passed from this System.IO.Ports.SerialPort
            object were invalid.
            </exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ISecurityDriver.AreaNames">
            <summary>
            Returns an array of ScriptString elements for the area names.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ISecurityDriver.ZoneNames">
            <summary>
            Returns an array of ScriptString elements for the zone names.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ISecurityDriver.ZonePhysicalStatuses">
            <summary>
            Returns an array of ScriptNumber elements representing the element's PhysicalZoneStatuses enumeration value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ISecurityDriver.ZonePhysicalStatusTexts">
            <summary>
            Returns an array of ScriptString elements representing the display text for the element's PhysicalZoneStatuses enumeration value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ISecurityDriver.AreaArmStatuses">
            <summary>
            Returns an array of ScriptNumber elements representing the element's ArmStatuses enumeration value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ISecurityDriver.AreaArmStatusTexts">
            <summary>
            Returns an array of ScriptString elements representing the display text for the element's ArmStatuses enumeration value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ISecurityDriver.AreaArmUpStates">
            <summary>
            Returns an array of ScriptNumber elements representing the element's ArmUpStates enumeration value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ISecurityDriver.AreaArmUpStateTexts">
            <summary>
            Returns an array of ScriptString elements representing the display text for the element's ArmUpStates enumeration value.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.PhysicalZoneStatuses.Unknown">
            <summary>
            The driver has not yet identified the zone's status.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.PhysicalZoneStatuses.Normal">
            <summary>
            The window or door is closed, motion NOT detected, etc.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.PhysicalZoneStatuses.Trouble">
            <summary>
            There is a problem with the zone.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.PhysicalZoneStatuses.Violated">
            <summary>
             The window or door is open, motion detected, etc.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.PhysicalZoneStatuses.Bypassed">
            <summary>
            The zone has been bypassed, which indicates that the security system will ignore the zone.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ArmUpStates.Unknown">
            <summary>
            The driver has not yet identified the arm up state.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ArmUpStates.NotReadyToArm">
            <summary>
            At least on zone has a status that will prevent the security system from arming.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ArmUpStates.ReadyToArm">
            <summary>
            The security system is ready to be armed.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ArmUpStates.ReadyToForceArm">
            <summary>
            The security system is ready to be armed, while at least one zone is violated but allows arming while violated.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ArmUpStates.ArmedWithExitTimerWorking">
            <summary>
            The system has recently been armed and the exit timer is running.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ArmUpStates.ArmedFully">
            <summary>
            The system is fully armed.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ArmUpStates.ForceArmedWithAForceArmZoneViolated">
            <summary>
            The system has been armed, while at least one zone is violated but allows being armed while violated.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.ArmUpStates.ArmedWithABypass">
            <summary>
            The system was armed with at least one zone having a bypassed status.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.HiddenTextDriverSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.HiddenTextDriverSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.HiddenTextDriverSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.DaysOfWeekDriverEventParameterEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.DaysOfWeekDriverEventParameterEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceEventParameterEditors.DaysOfWeekDriverEventParameterEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMultiroomAudioDriver">
            <summary>
            This interface is used for multi-room audio devices such as A/V receivers and whole home audio devices.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMatrixSwitcherDriver">
            <summary>
            This interface is used for matrix switchers (usually Audio and/or Video) and is a subset of the IMultiroomAudio interface.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMatrixSwitcherDriver.SetZoneSource(CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptNumber,CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptNumber)">
            <summary>
            Sets the specified zone to use the specified source.
            </summary>
            <param name="zoneNumber">The zone number.</param>
            <param name="sourceNumber">The source number.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMatrixSwitcherDriver.CycleZoneSource(CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptNumber)">
            <summary>
            Cycles to the next source for the specified zone.
            </summary>
            <param name="zoneNumber">The zone to cycle the source.</param>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMatrixSwitcherDriver.ZoneNames">
            <summary>
            The name of each zone.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMatrixSwitcherDriver.SourceNames">
            <summary>
            The name of each source.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMatrixSwitcherDriver.ZoneSources">
            <summary>
            The source number that each zone is set to.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMatrixSwitcherDriver.ZoneSourceNames">
            <summary>
            The name of the source that each zone is set to.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.BooleanDriverSettingEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.BooleanDriverSettingEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DeviceSettingEditors.BooleanDriverSettingEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:SharedLibrary.LoggerVerbosity.Quiet">
            <summary>
            Fatal will be logged.
            </summary>
        </member>
        <member name="F:SharedLibrary.LoggerVerbosity.Minimal">
            <summary>
            Warning, Error and Fatal events will be logged.
            </summary>
        </member>
        <member name="F:SharedLibrary.LoggerVerbosity.Normal">
            <summary>
            SystemMessage, Warning, Error, and Fatal events will be logged.
            </summary>
        </member>
        <member name="F:SharedLibrary.LoggerVerbosity.Detailed">
            <summary>
            Information, SystemMessage, Warning, Error, and Fatal events will be logged.
            </summary>
        </member>
        <member name="F:SharedLibrary.LoggerVerbosity.Diagnostic">
            <summary>
            All events will be logged.
            </summary>
        </member>
        <member name="T:SharedLibrary.LoggerClient">
            <summary>
            A very simplistic logging class.
            </summary>
        </member>
        <member name="M:SharedLibrary.LoggerClient.Log(System.String,CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)">
            <summary>
            Logs message to the system log if the severity is applicable.  This method will NOT throw an exception.
            </summary>
            <param name="message">The text to log.</param>
            <param name="severity">The severity of the event.</param>
        </member>
        <member name="M:SharedLibrary.LoggerClient.LogForce(System.String,CodecoreTechnologies.Elve.DriverFramework.LoggerSeverity)">
            <summary>
            Logs message to the system log regardless of the severity.  This method will NOT throw an exception.
            </summary>
            <param name="message">The text to log.</param>
            <param name="severity">The severity of the event.</param>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryItemHeader.ID">
            <summary>
            The unique ID for the item such as an artist id or album id. If the library doesn't contain a unique id, then the value should be the full text item name which could be searched such as the artist's name.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryItemHeader.Title">
            <summary>
            The title text to show in the media browser for this item such as the artist name.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryItemHeader.SubTitle">
            <summary>
            The subtitle text to show for this item. This is normally only set for title and playlist tracks and usually has the format of: artist name - album name.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryItemHeader.FirstItemLocation">
            <summary>
            The 1st track to play for the given group. null if none. This is REQUIRED for titles, playlist tracks, and directory items, and recommended for other groupings.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryItemHeader.ThumbnailImage">
            <summary>
            The Thumbnail image representing the item. If there is no thumbnail then set to null.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryItemHeader.IsCollection">
            <summary>
            Indicates if this library item represents a collection of items within the current grouping, such as a collection of albums. If this is set to true, the Media Browser grouping will not change when drilling down but the filter for the current grouping will be set to the value of the ID property. This can be used for example to create sub-genres, or box set albums (of sub-albums). This property is only applicable to Genres, Artists, and Albums.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryItemHeader.HasFirstItemLocation">
            <summary>
            Indicates if the FirstItemLocation property contains a value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryItemHeader.HasThumbnailImage">
            <summary>
            Indicates if the ThumbnailImage property contains a value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryPlaylistHeader.PlaylistFileLocation">
            <summary>
            If the playlist has a playlist unique id or location which the media browser can use to play the entire group. If this is not supported then it should be null. If the media player does not support this then it will be ignored and the media browser will request all the tracks for the given item. This property is not applicable for titles and playlist tracks so it should be null.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryPlaylistHeader.PlaylistPlayID">
            <summary>
            The optional unique id or location which the media browser can use to play the entire group. If this is not supported then it should be null. If the media player does not support this then it will be ignored and the media browser will request all the tracks for the given item. This property is not applicable for titles and playlist tracks so it should be null.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryPlaylistHeader.HasPlaylistFileLocation">
            <summary>
            Indicates if the PlaylistLocation property contains a value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryPlaylistHeader.HasPlaylistPlayID">
            <summary>
            Indicates if the PlaylistLocation property contains a value.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryMusicItem.Rating">
            <summary>Indicates how much the video is liked or disliked.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.ItemID">
            <summary>The unique identifier of the item.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.ItemLocation">
            <summary>The location of the item such as a file path, url, etc.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.ItemSize">
            <summary>The size of the item. This could for example be a filesize or some other size metric.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.Title">
            <summary>The title of the item such as "The Incredibles"</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.Genre">
            <summary>The Genre of the item such as "Family". This may include more than one Genre.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.ParentalRating">
            <summary>The motion picture rating system certification. This can use any rating system, for example MPAA ratings are: G, PG, PG-13, R, NC-17, NR.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.Duration">
            <summary>The duration of the video.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.MediaType">
            <summary>The media type such as DVD, HD DVD, Blu-ray, etc.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.Description">
            <summary>The description/synopsis/overview of the item. This can also include any additional information for which does not fit in the other MediaLibraryVideoItem members.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.ReleaseDate">
            <summary>The date the video was released.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.Actors">
            <summary>The primary actors in the video.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryVideoItem.Rating">
            <summary>Indicates how much the video is liked or disliked.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryImageItem.Rating">
            <summary>Indicates how much the image is liked or disliked.</summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.IRule.Name">
            <summary>
            The rule's display name.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.IRule.DriverInstanceName">
            <summary>
            The name of the driver instance (also known as device).
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.IRule.DriverName">
            <summary>
            The name of the driver class type.  Example: "ViziaRFDriver"
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.IRule.Enabled">
            <summary>
            Indicates if this rule is enabled.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.IRule.EventMemberName">
            <summary>
            The name of the device property of field for the event.  The member must be decorated with the [DriverEvent] attribute or [SupportsDriverPropertyBinding] attribute.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.IRule.EventParameters">
            <summary>
            The parameters associated with the event.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DriverAttribute">
            <summary>
            Indicates that the class is an Elve device driver and specifies metadata about the driver.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,CodecoreTechnologies.Elve.DriverFramework.DriverMultipleInstances,System.Int32,System.Int32,CodecoreTechnologies.Elve.DriverFramework.DriverReleaseStages,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DriverAttribute class.
            </summary>
            <param name="displayName">The friendly display name of the driver.</param>
            <param name="description">A description of the driver.</param>
            <param name="author">The name of the person or entity that created the driver.</param>
            <param name="categoryName">The category that the driver belongs to.</param>
            <param name="subCategoryName">The sub-category that the driver belongs to.</param>
            <param name="defaultInstanceName">A default instance name of the driver.</param>
            <param name="multipleInstances">Indicates if this driver is allowed to have multiple instances.</param>
            <param name="majorVersion">The value of the major component of the version number.</param>
            <param name="minorVersion">The value of the minor component of the version number.</param>
            <param name="driverReleaseStage">Indicates the release stage of the driver.</param>
            <param name="deviceManufacturerName">The name of the device manufacturer.</param>
            <param name="deviceManufacturerUrl">The full url to the device menufacturer's web site.</param>
            <param name="registration">Registration and licensing information about the driver. (FUTURE USE)</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverAttribute.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,CodecoreTechnologies.Elve.DriverFramework.DriverCommunicationPort,CodecoreTechnologies.Elve.DriverFramework.DriverMultipleInstances,System.Int32,System.Int32,CodecoreTechnologies.Elve.DriverFramework.DriverReleaseStages,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the DriverAttribute class.
            </summary>
            <param name="displayName">The friendly display name of the driver.</param>
            <param name="description">A description of the driver.</param>
            <param name="author">The name of the person or entity that created the driver.</param>
            <param name="categoryName">The category that the driver belongs to.</param>
            <param name="subCategoryName">The sub-category that the driver belongs to.</param>
            <param name="defaultInstanceName">A default instance name of the driver.</param>
            <param name="primaryCommunicationPort">The primary communication port that the driver uses.</param>
            <param name="multipleInstances">Indicates if this driver is allowed to have multiple instances.</param>
            <param name="majorVersion">The value of the major component of the version number.</param>
            <param name="minorVersion">The value of the minor component of the version number.</param>
            <param name="driverReleaseStage">Indicates the release stage of the driver.</param>
            <param name="deviceManufacturerName">The name of the device manufacturer.</param>
            <param name="deviceManufacturerUrl">The full url to the device menufacturer's web site.</param>
            <param name="registration">Registration and licensing information about the driver. (FUTURE USE)</param>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DriverEventAttribute">
            <summary>
            Used to indicate that the decorated field or property is an event.
            Event's must be:
              It must be either a Field or Property (a Property is recommended).
              It's type must implement ICollection&lt;IRule&gt;. (usually of type List)
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.SupportsDriverPropertyBindingAttribute">
            <summary>
            Used to indicate that the decorated IScriptObject property (or field) subscribes to auto change event notification.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.SupportsDriverPropertyBindingAttribute.#ctor">
            <summary>
            Creates a SupportsDriverPropertyBinding attribute object with no auto event generation.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.SupportsDriverPropertyBindingAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a SupportsDriverPropertyBinding attribute object with auto property change event generation.
            </summary>
            <param name="eventDescription"></param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.SupportsDriverPropertyBindingAttribute.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a SupportsDriverPropertyBinding attribute object with auto property change event generation.
            </summary>
            <param name="eventDescription"></param>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.SupportsDriverPropertyBindingAttribute.AutoGeneratePropertyChangeEvent">
            <summary>
            Indicates if a 'Device Property Change' event definition should be automatically generated for the decorated property.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.SupportsDriverPropertyBindingAttribute.EventDisplayName">
            <summary>
            The display name for the 'Device Property Change' event definition.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.SupportsDriverPropertyBindingAttribute.EventDescription">
            <summary>
            The description for the 'Device Property Change' event definition.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.SupportsDriverPropertyBindingAttribute.PropertyIndexDisplayName">
            <summary>
            The display name shown in the Rules editor for the 'PropertyIndex' event argument.  For example this could be "Light ID" or "Thermostat ID".
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.SupportsDriverPropertyBindingAttribute.PropertyIndexDescription">
            <summary>
            The description shown in the Rules editor for the 'PropertyIndex' event argument.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DaysOfWeekDriverEventParameterAttribute.ValidateDaysOfWeekEventParameter(CodecoreTechnologies.Elve.DriverFramework.IRule)">
            <summary>
            Checks if the rule has a DaysOfWeek filter parameter and if it matches today's day of the week.
            </summary>
            <param name="rule">The rule to check.</param>
            <returns>Returns true if there is no DaysOfWeek filter or if there is one and it matches today, otherwise false. A return value of false indicates that that rule should NOT be run.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DaysOfWeekDriverEventParameterAttribute.ValidateDaysOfWeekEventParameter(CodecoreTechnologies.Elve.DriverFramework.IRule,System.DateTime)">
            <summary>
            Checks if the rule has a DaysOfWeek filter parameter and if it matches the specified date's day of the week.
            </summary>
            <param name="rule">The rule to check.</param>
            <param name="dt">The date to compare.</param>
            <returns>Returns true if there is no DaysOfWeek filter or if there is one and it matches the specified date, otherwise false. A return value of false indicates that that rule should NOT be run.</returns>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DriverEventArgDictionary">
            <summary>
            Represents a dictionary of named ScriptObjects which are accessible from a script when executing a rule as properties of the EventArgs scripting object.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DriverEventArg">
            <summary>
            Represents a named ScriptObjects which is accessible from a script when executing a rule a property of the EventArgs scripting object with the specified name.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverEventArg.Name">
            <summary>
            The name of the EventArgs scripting object property. This name must be a valid scripting identifier format.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverEventArg.Value">
            <summary>
            The IScriptObject value.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DriverEventParameterDictionary">
            <summary>
            Represents a dictionary of named event parameter values which will be compared with a rule's whenever filters to determine if the rule should be run.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.StringDriverEventParameter">
            <summary>
            Provides case-sensitive, case-insensitive comparisons of strings as well as partial (Contains) comparisons of event parameters and rule whenever filters.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.StringDriverEventParameter.IsMatch(System.String)">
            <summary>
            Indicates if the specified rule's whenever filter matches the current event's parameter value.
            </summary>
            <param name="eventParameterValueFromRule">The whenever filter specified in a Rule.</param>
            <returns>true if the rule's whenever filter matches the current event's parameter value.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.StringDriverEventParameter.Name">
            <summary>
            The name of the event parameter. This MUST be the same as the name specified in the cooresponding [DriverEventParameter] attribute for the event.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.StringDriverEventParameter.Value">
            <summary>
            The current String value of the event parameter (for an event which has occurred).
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.BooleanDriverEventParameter">
            <summary>
            Provides boolean comparisons of event parameters and rule whenever filters. The rule's whenever filter value is converted to a boolean using Convert.ToBoolean().
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.BooleanDriverEventParameter.IsMatch(System.String)">
            <summary>
            Indicates if the specified rule's whenever filter matches the current event's parameter value.
            </summary>
            <param name="eventParameterValueFromRule">The whenever filter specified in a Rule.</param>
            <returns>true if the rule's whenever filter matches the current event's parameter value.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.BooleanDriverEventParameter.Name">
            <summary>
            The name of the event parameter. This MUST be the same as the name specified in the cooresponding [DriverEventParameter] attribute for the event.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.BooleanDriverEventParameter.Value">
            <summary>
            The current Boolean value of the event parameter (for an event which has occurred).
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.NumericDriverEventParameter">
            <summary>
            Provides numeric comparisons of event parameters and rule whenever filters. The rule's whenever filter value is converted to a double using Convert.ToDouble(). -1 can also optionally mean any numeric value is allowed.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.NumericDriverEventParameter.IsMatch(System.String)">
            <summary>
            Indicates if the specified rule's whenever filter matches the current event's parameter value.
            </summary>
            <param name="eventParameterValueFromRule">The whenever filter specified in a Rule.</param>
            <returns>true if the rule's whenever filter matches the current event's parameter value.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.NumericDriverEventParameter.Name">
            <summary>
            The name of the event parameter. This MUST be the same as the name specified in the cooresponding [DriverEventParameter] attribute for the event.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.NumericDriverEventParameter.Value">
            <summary>
            The current numeric value of the event parameter (for an event which has occurred). The value will be converted to a Double.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DateTimeDriverEventParameter">
            <summary>
            Provides date/time comparisons of event parameters and rule whenever filters. The rule's whenever filter value must be in an ISO format.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DateTimeDriverEventParameter.IsMatch(System.String)">
            <summary>
            Indicates if the specified rule's whenever filter matches the current event's parameter value.
            </summary>
            <param name="eventParameterValueFromRule">The whenever filter specified in a Rule.</param>
            <returns>true if the rule's whenever filter matches the current event's parameter value.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DateTimeDriverEventParameter.Name">
            <summary>
            The name of the event parameter. This MUST be the same as the name specified in the cooresponding [DriverEventParameter] attribute for the event.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DateTimeDriverEventParameter.Value">
            <summary>
            The current DateTime value of the event parameter (for an event which has occurred).
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DaysOfWeekDriverEventParameter">
            <summary>
            Provides support for comparisons of event parameters and rule whenever filters using DaysOfWeekDriverEventParameterEditor.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DaysOfWeekDriverEventParameter.IsMatch(System.String)">
            <summary>
            Indicates if the specified rule's whenever filter matches the current event's parameter value.
            </summary>
            <param name="eventParameterValueFromRule">The whenever filter specified in a Rule.</param>
            <returns>true if the rule's whenever filter matches the current event's parameter value.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DaysOfWeekDriverEventParameter.Name">
            <summary>
            The name of the event parameter. This MUST be the same as the name specified in the cooresponding [DriverEventParameter] attribute for the event.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DaysOfWeekDriverEventParameter.Value">
            <summary>
            The current day of the the week value of the event parameter (for an event which has occurred). 0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.RegexDriverEventParameter">
            <summary>
            Provides support for comparisons of event parameters and rule whenever filters using regular expressions.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.RegexDriverEventParameter.IsMatch(System.String)">
            <summary>
            Indicates if the specified rule's whenever filter matches the current event's parameter value.
            </summary>
            <param name="eventParameterValueFromRule">The whenever filter specified in a Rule.</param>
            <returns>true if the rule's whenever filter matches the current event's parameter value.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.RegexDriverEventParameter.Name">
            <summary>
            The name of the event parameter. This MUST be the same as the name specified in the cooresponding [DriverEventParameter] attribute for the event.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.RegexDriverEventParameter.Value">
            <summary>
            The current String value of the event parameter (for an event which has occurred).
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DriverReleaseStages">
            <summary>
            Indicates the current release stage of a driver.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverReleaseStages.Development">
            <summary>
            Indicates that the driver in the development stage, is incomplete and/or may not be stable.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverReleaseStages.Test">
            <summary>
            Indicates that the driver is complete feature-wise but may not be completely stable.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverReleaseStages.Production">
            <summary>
            Indicates that the driver is complete and stable.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverReleaseStages.Depreciated">
            <summary>
            Indicates that the driver is no longer supported and there may be a newer alternate driver which replaced it.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverReleaseStages.Experimental">
            <summary>
            Indicates that the driver is available as-is but may not be supported and may not be completely stable.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.DriverMultipleInstances">
            <summary>
            Indicates if more than one instance of the driver can by used in the networked system or in a single driver service.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverMultipleInstances.NotAllowed">
            <summary>
            Indicates that only one instance of the driver can be configured within the system.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverMultipleInstances.OnePerDriverService">
            <summary>
            Indicates that more than one instance of the driver can be configured within the system, but only one can be configured per driver service.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DriverMultipleInstances.MultiplePerDriverService">
            <summary>
            Indicates that more than one instance of the driver can be configured within any driver services.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceLifecycleStage.PendingStart">
            <summary>
            The device has been instantiated but StartDriver() has not yet been called and the rules have not been initialized.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceLifecycleStage.Starting">
            <summary>
            The driver is starting up. During this period StartDriver() is called, rules are added, and InitializeRules() will be called.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceLifecycleStage.Running">
            <summary>
            The device has been started and any rules have been added and initiated.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.DeviceLifecycleStage.Stopping">
            <summary>
            StopDriver is being called. The device instance will be set to null and will be inaccessible after the driver is stopped.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.XmlUtility.StripInvalidXmlCharacters(System.String)">
            <summary>
            Replaces invalid xml characters in a string with a space.  This prevents errors when loading the xml later.
            </summary>
            <param name="s">The string to strip the xml characters from.</param>
            <returns>The resulting string.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.XmlUtility.CreateTextElement(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Creates an xml element node with the specified name and text
            </summary>
            <param name="doc">associated document</param>
            <param name="elementName">node name to use</param>
            <param name="elementText">node text</param>
            <returns></returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Utilities.XmlUtility.RemoveNode(System.Xml.XmlDocument,System.String)">
            <summary>
            Removes a node.
            </summary>
            <param name="doc">The XmlDocument</param>
            <param name="xpath">The XPath expression.</param>
            <returns>True if the item existed prior to removing.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.GetMediaInfo(CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptString)">
            <summary>
            Get the item object that contains the item name, artist,
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.GetMediaImage(CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptString)">
            <summary>
            Gets the item's image.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.GetMediaFile(CodecoreTechnologies.Elve.DriverFramework.Scripting.ScriptString)">
            <summary>
            Gets the file.
            </summary>
            <param name="itemID"></param>
            <returns></returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.RescanLibrary">
            <summary>
            Scan for file (or load itunes xml file, etc).
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.GetByDirectory(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets an array of items by directory. If the driver does not support the Directory grouping then this should throw a NotSupportException.
            </summary>
            <param name="directoryPath">The directory path to retrieve the contents of.</param>
            <param name="pageIndex">The page index to retrieve (zero based).</param>
            <param name="pageSize">The number of items in each page.</param>
            <param name="includeThumbnailImages">Indicates if the results should include the thumbnail images.</param>
            <returns>An array of file and directory items for the specified path and page.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.GetGenresArtistsAlbumsOrTitles(CodecoreTechnologies.Elve.DriverFramework.Media.MediaLibraryGrouping,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets an array of items based on search criteria for the Artist, Album, Title, Genre, and Playlist groupings. If the driver does not support these groupings then this should throw a NotSupportException.
            </summary>
            <param name="grouping">The grouping must be Genre, Artist, Album, or Title. If any other grouping is passed into the method then the method should throw an ArgumentException.</param>
            <param name="pageIndex">The zero based index of the page of items to return.</param>
            <param name="pageSize">The number of items on each page. The resulting array should contain no more than this number.</param>
            <param name="artistID">If this is not blank or null then the resulting array should only include items with a matching artist ID. The ID is whatever ID is assigned to the artist in the library, if none then the artist name could be used. This is used by the Media Browser touch screen control when drilling down into an artist or artist collection.</param>
            <param name="albumID">If this is not blank or null then the resulting array should only include items with a matching album ID. The ID is whatever ID is assigned to the album in the library, if none then the album name could be used. This is used by the Media Browser touch screen control when drilling down into an album or album collection.</param>
            <param name="genreID">If this is not blank or null then the resulting array should only include items with a matching genre ID. The ID is whatever ID is assigned to the genre in the library, if none then the genre name could be used. This is used by the Media Browser touch screen control when drilling down into a genre or genre collection.</param>
            <param name="searchContainsText">If this is not blank or null then the resulting array should only include items in which the grouping element contains the specified text at the beginning of a word.</param>
            <param name="searchStartsWithText">If this is not blank or null then the resulting array should only include items in which the grouping element starts with the specified text.</param>
            <param name="includeThumnailImages">Indicates if the resulting array should only include the thumbnail cover art for the items</param>
            <returns>An array of items for the specified grouping, page, and other filter criteria pararameters.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.GetPlaylists(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Gets an array of playlists. If the driver does not support the Playlist grouping then this should throw a NotSupportException.
            </summary>
            <param name="pageIndex">The zero based index of the page of items to return.</param>
            <param name="pageSize">The number of items on each page. The resulting array should contain no more than this number.</param>
            <param name="searchContainsText">If this is not blank or null then the resulting array should only include items in which the grouping element contains the specified text at the beginning of a word.</param>
            <param name="searchStartsWithText">If this is not blank or null then the resulting array should only include items in which the grouping element starts with the specified text.</param>
            <returns>An array of playlists for the specified page and other filter criteria pararameters.</returns>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.GetPlaylistTracks(System.String,System.Int32,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Gets an array of tracks for the specified playlist. If the driver does not support the PlaylistTracks grouping then this should throw a NotSupportException.
            </summary>
            <param name="playlistID">The unique identifier of the playlist to return tracks for.</param>
            <param name="pageIndex">The zero based index of the page of items to return.</param>
            <param name="pageSize">The number of items on each page. The resulting array should contain no more than this number.</param>
            <param name="searchContainsText">If this is not blank or null then the resulting array should only include items in which the grouping element contains the specified text at the beginning of a word.</param>
            <param name="searchStartsWithText">If this is not blank or null then the resulting array should only include items in which the grouping element starts with the specified text.</param>
            <param name="includeThumnailImages">Indicates if the resulting array should only include the thumbnail cover art for the items</param>
            <returns>An array of tracks for the specified playlist, page and search criteria.</returns>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.MediaLibraryType">
            <summary>
            Indicates if this is a Music, Video, or Images library.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.SupportedGroupings">
            <summary>
            Includes each grouping (or'ed together) which this driver supports.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.CompanionMediaPlayerDriverName">
            <summary>
            The type name of the class (just the class name, not the fully qualified type name) of the Driver class of the media player driver which is the companion to this media library driver. null if none. For example Squeezebox and iTune have both a media player and media library.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.Scanning">
            <summary>
            Indicates if the driver is scanning for media items and building it's library.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.ScanStartTime">
            <summary>
            Indicates when the current scan started.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.LastScanDateTime">
            <summary>
            Indicates when the last scan occured.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.DriverInterfaces.IMediaLibraryDriver.ItemCount">
            <summary>
            Indicates to total number of items in the library.
            </summary>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication">
            <summary>
            Provides client connections for USB HID Communication devices.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the UsbHidCommunication class for the specified vendor id and product id.
            A connection is not established until Open() or StartMonitoring() is called.
            </summary>
            <param name="vendorID">The vendor id of the device.</param>
            <param name="productID">The product id of the device.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.Open">
            <summary>
            Opens a new UsbHidCommunication connection. The FoundUsbDevice event will be triggered when a device is found with a matching vendor and product id, in which you may conditionally cancel the connection (for example when more than one of the device is found). If the FoundUsbDevice event is not handled then the first matching device will be used.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.Dispose">
            <summary>
            Releases all resources used by the UsbHidCommunication.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.SimulateReceivedData(System.String)">
            <summary>
            Simulate data being received from the usb port. The data will be processed as if it were actually received as incoming data from the usb ports. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.SimulateReceivedData(System.Byte[])">
            <summary>
            Simulate data being received from the usb port. The data will be processed as if it were actually received as incoming data from the usb ports. This is useful for testing.
            </summary>
            <param name="data">The data to simulate being received.</param>
        </member>
        <member name="E:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.FoundUsbDevice">
            <summary>
            The FoundUsbDevice event is triggered when a device is found with a matching vendor and product id, in which you may conditionally cancel the connection (for example when more than one of the device is found). If the FoundUsbDevice event is not handled then the first matching device will be used.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.VendorID">
            <summary>
            Gets or sets the USB device vendor ID to find.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.ProductID">
            <summary>
            Gets or sets the USB device product ID to find.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.UseAlternateSendMethod">
            <summary>
            Indicates if data should be sent using the stream (false) or using HidD_SetOutputReport (true).
            The default id false, which is to send using the stream.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.DriverFramework.Communication.UsbHidCommunication.Connected">
            <summary>
            Indicates if the pc is successfully communicating with the the usb device.
            </summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.DriverFramework.Extensions.StringArrayExtensions.Compare(System.String[],System.String[],System.Int32@)">
            <summary>
            Compares two arrays returning a boolean indicating if they are a complete match and the index of the highest matching element.
            </summary>
            <param name="a">An Array.</param>
            <param name="b">An Array.</param>
            <param name="maxMatchingIndex">The highest matching element.</param>
            <returns>A boolean indicating if they are a complete match and the index of the highest matching element.</returns>
        </member>
        <member name="T:CodecoreTechnologies.Elve.DriverFramework.Extensions.StringJoinOptions">
            <summary>
            Specifies options for the Strings.JoinString() method.
            </summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Extensions.StringJoinOptions.QuoteNonNumericEntries">
            <summary>Place quotes around any array elements that are not numeric.</summary>
        </member>
        <member name="F:CodecoreTechnologies.Elve.DriverFramework.Extensions.StringJoinOptions.QuoteAllEntries">
            <summary>Place quotes around all array elements.</summary>
        </member>
        <member name="M:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.String,CodecoreTechnologies.Elve.Configuration.DeviceSettingDictionary,System.Boolean,System.Boolean,System.TimeSpan,System.Collections.Generic.List{System.String},SharedLibrary.LoggerVerbosity)">
            <summary>
            Instantiates the DeviceConfiguration object.
            </summary>
            <param name="serverName">The NetBIOS computer name of the Windows machine that this device should run on.</param>
            <param name="name">The unique identifier name of the device which the device can be referenced by in scripts.</param>
            <param name="aliases">A list of alias device names.</param>
            <param name="displayName">Any display name or description of the device.</param>
            <param name="driverName">The short type name of the driver class. Do not include the namespace.</param>
            <param name="settings">A dictionary of settings for the device.</param>
            <param name="enabled">Indicates if the device is enabled. Devices which are not enabled will not be run.</param>
            <param name="recordPropertyValues">Indicates if the device property values are stored periodically for historical reporting purposes.</param>
            <param name="propertiesToRecord">A list of property names (with embedded index for arrays) to record when recordPropertyValues is true.</param>
            <param name="verbosity">Indicates the logging verbosity that the device should use. This is usually Normal or Diagnostics.</param>
            <exception cref="T:System.FormatException">A parameter has an invalid format.</exception>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.ServerName">
            <summary>
            The NetBIOS computer name of the Windows machine that this device should run on.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.Name">
            <summary>
            The unique identifier name of the device which the device can be referenced by in scripts
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.Aliases">
            <summary>
            A list of alias device names.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.DisplayName">
            <summary>
            Any display name or description of the device.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.DriverName">
            <summary>
            The short type name of the driver class. Do not include the namespace.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.Settings">
            <summary>
            A dictionary of settings for the device.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.Enabled">
            <summary>
            Indicates if the device is enabled. Devices which are not enabled will not be run.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.PropertyValueRecordingEnabled">
            <summary>
            Indicates if the device property values are stored periodically for historical reporting purposes.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.PropertyValueRecordingInterval">
            <summary>
            Indicates the time interval that the device property values are recorded.
            </summary>
        </member>
        <member name="P:CodecoreTechnologies.Elve.Configuration.DeviceConfiguration.LoggingVerbosity">
            <summary>
            Indicates the logging verbosity that the device should use. This is usually Normal or Diagnostics.
            </summary>
        </member>
    </members>
</doc>
